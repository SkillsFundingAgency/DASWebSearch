// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sfa.Eds.Das.Web.AcceptanceTests.Test.Features.Sprint1
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Search for a Standard by keyword", Description="In order to find an apprenticeship as per my needs\r\nAs an employer \r\nI want to be" +
        " able to search from available Standards", SourceFile="Test\\Features\\Sprint1\\StandardSearch.feature", SourceLine=0)]
    public partial class SearchForAStandardByKeywordFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StandardSearch.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Search for a Standard by keyword", "In order to find an apprenticeship as per my needs\r\nAs an employer \r\nI want to be" +
                    " able to search from available Standards", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify landing page", new string[] {
                "smoke"}, SourceLine=7)]
        public virtual void VerifyLandingPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify landing page", new string[] {
                        "smoke"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
testRunner.When("I am on Search landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
testRunner.Then("I should be able to see home page with title as \"Home Page - Employer Apprentices" +
                    "hip Search\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SearchStandardByKeyword(string jOBROLE, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Standard by keyword", @__tags);
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I am on Search landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And(string.Format("I enter keyword \'{0}\' in search box", jOBROLE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When("I click on search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then(string.Format("I should see matching \'{0}\' standards on result page", jOBROLE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, Actuarial technician", new string[] {
                "regression"}, SourceLine=21)]
        public virtual void SearchStandardByKeyword_ActuarialTechnician()
        {
            this.SearchStandardByKeyword("Actuarial technician", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, Financial Adviser", new string[] {
                "regression"}, SourceLine=22)]
        public virtual void SearchStandardByKeyword_FinancialAdviser()
        {
            this.SearchStandardByKeyword("Financial Adviser", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, software engineer", new string[] {
                "regression"}, SourceLine=23)]
        public virtual void SearchStandardByKeyword_SoftwareEngineer()
        {
            this.SearchStandardByKeyword("software engineer", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, manufacturing engineer", new string[] {
                "regression"}, SourceLine=24)]
        public virtual void SearchStandardByKeyword_ManufacturingEngineer()
        {
            this.SearchStandardByKeyword("manufacturing engineer", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, Legal Services", new string[] {
                "regression"}, SourceLine=25)]
        public virtual void SearchStandardByKeyword_LegalServices()
        {
            this.SearchStandardByKeyword("Legal Services", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, Designer", new string[] {
                "regression"}, SourceLine=26)]
        public virtual void SearchStandardByKeyword_Designer()
        {
            this.SearchStandardByKeyword("Designer", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, dental nurse", new string[] {
                "regression"}, SourceLine=27)]
        public virtual void SearchStandardByKeyword_DentalNurse()
        {
            this.SearchStandardByKeyword("dental nurse", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, Electrician", new string[] {
                "regression"}, SourceLine=28)]
        public virtual void SearchStandardByKeyword_Electrician()
        {
            this.SearchStandardByKeyword("Electrician", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, car mechanic", new string[] {
                "regression"}, SourceLine=29)]
        public virtual void SearchStandardByKeyword_CarMechanic()
        {
            this.SearchStandardByKeyword("car mechanic", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search Standard by keyword, Manager", new string[] {
                "regression"}, SourceLine=30)]
        public virtual void SearchStandardByKeyword_Manager()
        {
            this.SearchStandardByKeyword("Manager", ((string[])(null)));
        }
        
        public virtual void VerifyInvalidSearch(string jOBROLE, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify invalid search", @__tags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
testRunner.Given("I am on Search landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
testRunner.And(string.Format("I enter keyword \'{0}\' in search box", jOBROLE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
testRunner.When("I click on search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
testRunner.Then("I should see message \"Total results found: 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify invalid search, kdjfdkfjdfk", new string[] {
                "regression"}, SourceLine=40)]
        public virtual void VerifyInvalidSearch_Kdjfdkfjdfk()
        {
            this.VerifyInvalidSearch("kdjfdkfjdfk", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify invalid search, 1232322", new string[] {
                "regression"}, SourceLine=41)]
        public virtual void VerifyInvalidSearch_1232322()
        {
            this.VerifyInvalidSearch("1232322", ((string[])(null)));
        }
        
        public virtual void ValidateResultCount(string jOBROLE, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate result count", @__tags);
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I am on Search landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.And(string.Format("I enter keyword \'{0}\' in search box", jOBROLE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("I click on search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("I should see standards count on result page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate result count, Actuarial Technician", new string[] {
                "regression"}, SourceLine=52)]
        public virtual void ValidateResultCount_ActuarialTechnician()
        {
            this.ValidateResultCount("Actuarial Technician", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate result count, Financial Adviser", new string[] {
                "regression"}, SourceLine=53)]
        public virtual void ValidateResultCount_FinancialAdviser()
        {
            this.ValidateResultCount("Financial Adviser", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate result count, software engineer", new string[] {
                "regression"}, SourceLine=54)]
        public virtual void ValidateResultCount_SoftwareEngineer()
        {
            this.ValidateResultCount("software engineer", ((string[])(null)));
        }
        
        public virtual void SearchResultPageToHaveBestMatch(string keyword, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search result Page to have best match", @__tags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.Given("I am on Search landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
testRunner.When(string.Format("I enter keyword \'{0}\'", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
testRunner.And("I click on search button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
testRunner.Then("I should result search page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
testRunner.And(string.Format("it should list most best match \'{0}\' on top of the search list", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search result Page to have best match, Mechanical Engineer", SourceLine=66)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void SearchResultPageToHaveBestMatch_MechanicalEngineer()
        {
            this.SearchResultPageToHaveBestMatch("Mechanical Engineer", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search result Page to have best match, Software Engineer", SourceLine=67)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void SearchResultPageToHaveBestMatch_SoftwareEngineer()
        {
            this.SearchResultPageToHaveBestMatch("Software Engineer", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
