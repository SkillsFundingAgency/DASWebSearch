@using MongoDB.Bson
@using Sfa.Das.Sas.Core.Extensions
@model Sfa.Das.Sas.Core.Models.FrameworkMetaData

@{
    ViewBag.Title = "Edit " + Model.FrameworkName  + ": " + Model.Pathway;
}

<h2>Edit @Model.FrameworkName: @Model.Pathway</h2>
<span>
    @Html.ActionLink("Back", "FrameworkDetails", new { Model.Id } )
</span>

<div class="edit">
    <form action="@Url.Action("UpdateFramework")" method="post">

        <input type="hidden" name="id" value="@Model.Id"/>

        <div class="edit-header">
            <h3>@Model.FrameworkName: @Model.Pathway</h3>
            <input type="submit" class="btn btn-primary btn-lg" value="Update" />
        </div>

        <div class="boxed">
            @GetFrameworkProperty("ApprenticeshipId", "apprenticeshipId", Model.ApprenticeshipId.ToString())
            <div>
                <label>EffectiveFrom</label>
                <input type="text" name="effectivefrom" class="datepicker from" value="@Model.EffectiveFrom.ToString("yyyy-MM-dd")"/>
            </div>
            <div>
                <label>EffectiveTo</label>
                <input type="text" name="effectiveto" class="datepicker to" value="@Model.EffectiveTo.ToString("yyyy-MM-dd")"/>
            </div>
        </div>

        <div class="boxed">
            <label>Keywords</label>
            <input type="text" id="keyword-input" placeholder="add new keyword"/>
            <div id="keywords-container" data-json="@Model.Keywords.WhereSafe(m => !string.IsNullOrEmpty(m)).ToJson()">
            </div>
        </div>

        <div class="boxed">
            <label>Job Roles</label>
            <input type="text" id="jobroles-title" placeholder="title"/>
            <input type="text" id="jobroles-description" placeholder="description"/>
            <div id="jobrole-container" data-json="@Model.JobRoleItems.ToJson()">
            </div>
        </div>

        <div>
            <label>Framework Overview</label>
            <textarea class="htmledit" name="frameworkoverview">
                @Html.Raw(@Model.FrameworkOverview)
            </textarea>
        </div>
        <div>
            <label>Entry Requirements</label>
            <textarea class="htmledit" name="entryrequirements">
                @Html.Raw(Model.EntryRequirements)
            </textarea>
        </div>
        <div>
            <label>Professional Registration</label>
            <textarea class="htmledit" name="professionalregistration">
                @Html.Raw(Model.ProfessionalRegistration)
            </textarea>
        </div>

        <div>
            <label>Completion Qualifications</label>
            <textarea class="htmledit" name="completionqualifications">
                @Html.Raw(@Model.CompletionQualifications)
            </textarea>
        </div>

        <div class="boxed">
            <label>Competency Qualification</label>
            <input type="text" id="competencyqualification-input" placeholder="add new competency qualification"/>
            <div id="competencyqualification-container" data-json="@Model.CompetencyQualification.WhereSafe(x => x != string.Empty).ToJson()">
            </div>
        </div>

        <div class="boxed">
            <label>Knowledge Qualification</label>
            <input type="text" id="knowledgequalification-input" placeholder="add new knowledge qualification"/>
            <div id="knowledgequalification-container" data-json="@Model.KnowledgeQualification.WhereSafe(x => x != string.Empty).ToJson()">
            </div>
        </div>

        <div class="boxed">
            <label>Combined Qualification</label>
            <input type="text" id="combinedqualification-input" placeholder="add new combined qualification"/>
            <div id="combinedqualification-container" data-json="@Model.CombinedQualification.WhereSafe(x => x != string.Empty).ToJson()">
            </div>
        </div>
    </form>

</div>

@helper GetFrameworkProperty(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
            <dt>@title</dt>
            <dd id="@id">
                @(!string.IsNullOrEmpty(item) ? Html.MarkdownToHtml(item) : Html.MarkdownToHtml("none"))
            </dd>
    }
}

@{
    Html.RenderPartial("Templates/_UpdateTemplates");
}