@using System.Globalization
@using Sfa.Das.Sas.Core.Extensions
@using Sfa.Das.Sas.Core.Models
@model FrameworkMetaData

@{
    ViewBag.Title = $"{@Model.FrameworkName}: {Model.Pathway} - FrameworkDetails";
}

<div class="framework-details">

    <h2 class="pageTitle">@Model.FrameworkName: @Model.Pathway</h2>
    <span>
        <a href="@Url.Action("EditFramework", routeValues: new { Model.Id })">
            Edit
            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
        </a>
    </span>
    <div>
        <div class="top">
            <div>
                <label>ApprenticeshipId</label>
                <div>@Model.ApprenticeshipId.ToString()</div>
            </div>
            <div>
                <label>Framework Code</label>
                <div>@Model.FrameworkCode</div>
            </div>
            <div>
                <label>Prog Type</label>
                <div>@Model.ProgType</div>
            </div>
            <div>
                <label>Pathway Code</label>
                <div>@Model.PathwayCode</div>
            </div>
            <div>
                <label>Typical Length</label>
                <div>@GetFrameworkTypicalLengthString(Model.TypicalLength)</div>
            </div>

            <div>
                <label>Effective From</label>
                <div>@Model.EffectiveFrom.ToString("yyyy MMMM dd")</div>
            </div>

            <div>
                <label>Effective To</label>
                <div>@Model.EffectiveTo.ToString("yyyy MMMM dd")</div>
            </div>

            <div>
                <label title="Sector Subject Area Tier 1">SSA1</label>
                <div>@Model.SectorSubjectAreaTier1</div>
            </div>

            <div>
                <label title="Sector Subject Area Tier 2">SSA2</label>
                <div>@Model.SectorSubjectAreaTier2</div>
            </div>
        </div>

        <hr />

        @GetFrameworkListProperty("Keywords", "keywords", Model.Keywords)
        @GetFrameworkJobRoleItemsListProperty("Job Role Items", "jobRoleItems", Model.JobRoleItems)
        <hr />
        @GetFrameworkPropertyRaw("Framework Overview", "frameworkOverview", @Model.FrameworkOverview)
        @GetFrameworkPropertyRaw("Entry Requirements", "entryRequirements", Model.EntryRequirements)
        @GetFrameworkPropertyRaw("Professional Registration", "professionalRegistration", Model.ProfessionalRegistration)
        @GetFrameworkPropertyRaw("Completion Qualifications", "completionQualifications", Model.CompletionQualifications)
        <hr />
        @GetFrameworkListProperty("Competency Qualification", "competencyQualification", Model.CompetencyQualification)
        @GetFrameworkListProperty("Knowledge Qualification", "knowledgeQualification", Model.KnowledgeQualification)
        @GetFrameworkListProperty("Combined Qualification", "combinedQualification", Model.CombinedQualification)
    </div>
</div>

@helper GetFrameworkProperty(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">
            @(!string.IsNullOrEmpty(item) ? Html.MarkdownToHtml(item) : Html.MarkdownToHtml("none"))
        </dd>
    }
}

@helper GetFrameworkPropertyRaw(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">
            @(!string.IsNullOrEmpty(item) ? @Html.Raw(HttpUtility.HtmlDecode(item)) : Html.MarkdownToHtml("none"))
        </dd>
    }
}

@helper GetFrameworkListProperty(string title, string id, IEnumerable<string> itemList, bool hideIfEmpty = false)
{
    if (!hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">
            @(itemList != null && itemList.Any() ? @Html.MarkdownToHtml(String.Join(", ", itemList)) : Html.MarkdownToHtml("none"))
        </dd>
    }
}

@helper GetFrameworkJobRoleItemsListProperty(string title, string id, IEnumerable<JobRoleItem> itemList, bool hideIfEmpty = false)
{
    if (itemList != null && !hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">
            @if (itemList.Any())
            {
                <ul>
                    @foreach (var item in itemList)
                    {
                        <li>
                            <span>
                                <b>
                                    @(!string.IsNullOrEmpty(item.Title) ? Html.MarkdownToHtml(item.Title) : Html.MarkdownToHtml("none"))
                                </b>
                                @(!string.IsNullOrEmpty(@item.Description) ? Html.MarkdownToHtml(@item.Description) : Html.MarkdownToHtml("none"))
                            </span>
                        </li>
                    }
                </ul>
            }
            else
            {
                @Html.MarkdownToHtml("none")
            }
        </dd>
    }
}

@helper GetFrameworkTypicalLengthProperty(string title, string id, TypicalLength item, bool hideIfEmpty = false)
{
    if (!hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">
            @if (item != null)
            {
                <span>From @item.From to @item.To @item.Unit</span>
            }
            else
            {
                @Html.MarkdownToHtml("none")
            }
        </dd>
}
}


@helper GetFrameworkTypicalLengthString(TypicalLength item)
{
    if (item != null)
    {
        if (item.From.Equals(item.To))
        {
            <span>@item.From months</span>
        }
        else
        {
            <span>From @item.From to @item.To months</span>
        }
    }
}