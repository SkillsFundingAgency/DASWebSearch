@using Sfa.Das.Sas.Core.Extensions
@using Sfa.Das.Sas.Core.Models
@model Sfa.Das.Sas.Core.Models.StandardMetaData

@{
    ViewBag.Title = $"{@Model.Title} - Standard Details";
}
<div class="standard-details">

    <h2 class="pageTitle">@Model.Title</h2>
    <span>
        <a class="btn edit-btn" href="@Url.Action("EditStandard", routeValues: new { Model.Id })">
            Edit
            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
        </a>
    </span>
    <div>
        <div class="top">
            <div>
                <label>ApprenticeshipId</label>
                <div>@Model.ApprenticeshipId.ToString()</div>
            </div>
            <div>
                <label>Typical Length</label>
                <div>@GetStandardTypicalLengthProperty(Model.TypicalLength)</div>
            </div>
            <div>
                <label>Notional End Level</label>
                <div>@Model.NotionalEndLevel.ToString()</div>
            </div>
            <div>
                <label title="Sector Subject Area Tier 1">SSA1</label>
                <div>@Model.SectorSubjectAreaTier1</div>
            </div>

            <div>
                <label title="Sector Subject Area Tier 2">SSA2</label>
                <div>@Model.SectorSubjectAreaTier2</div>
            </div>
        </div>

        <hr />

        @GetStandardListProperty("Job Roles", "jobRoles", Model.JobRoles)
        @GetStandardListProperty("Keywords", "keywords", Model.Keywords)
        @GetStandardUrlProperty("Standard Pdf Url", "standardPdfUrl", Model.StandardPdfUrl)
        @GetStandardUrlProperty("Assessment Plan Pdf Url", "assessmentPlanPdfUrl", Model.AssessmentPlanPdfUrl)

        <hr />

        @GetStandardProperty("Entry Requirements", "entryRequirements", Model.EntryRequirements)
        @GetStandardProperty("What Apprentices Will Learn", "whatApprenticesWillLearn", Model.WhatApprenticesWillLearn)
        @GetStandardProperty("Qualifications", "qualifications", Model.Qualifications)

        <hr />

        @GetStandardProperty("Professional Registration", "professionalRegistration", Model.ProfessionalRegistration)
        @GetStandardProperty("Overview Of Role", "overviewOfRole", Model.OverviewOfRole)
    </div>
</div>

@helper GetStandardProperty(string title, string id, string item, bool hideIfEmpty = false)
{
if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
{
        <dt>@title</dt>
        <dd id="@id">
            @(!string.IsNullOrEmpty(item) ? Html.MarkdownToHtml(item) : Html.MarkdownToHtml("none"))
        </dd>
}
}

@helper GetStandardListProperty(string title, string id, IEnumerable<string> itemList, bool hideIfEmpty = false)
{
if (!hideIfEmpty)
{
        <dt>@title</dt>
        <dd id="@id">
            @(itemList != null && itemList.Any() ? @Html.MarkdownToHtml(String.Join(", ", itemList)) : Html.MarkdownToHtml("none"))
        </dd>
}
}

@helper GetStandardUrlProperty(string title, string id, string item, bool hideIfEmpty = false)
{
if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
{
        <dt>@title</dt>
        <dd id="@id">
            @if (!string.IsNullOrEmpty(item))
            {
                <a href="@item" target="_blank">@item</a>
            }
            else
            {
                @Html.MarkdownToHtml("none")
            }
        </dd>
}
}

@helper GetStandardTypicalLengthProperty(string title, string id, TypicalLength item, bool hideIfEmpty = false)
{
    if (!hideIfEmpty)
    {
            <dt>@title</dt>
            <dd id="@id">
                @if (item != null)
                {
                    <span>From @item.From to @item.To @item.Unit</span>
                }
                else
                {
                    @Html.MarkdownToHtml("none")
                }
            </dd>
    }
}

@helper GetStandardTypicalLengthProperty(TypicalLength item)
{
if (item != null)
{
    if (item.From.Equals(item.To))
    {
            <span>@item.From months</span>
    }
    else
    {
            <span>From @item.From to @item.To months</span>
    }
}
}
