@using Sfa.Eds.Das.Web.Extensions
@model Sfa.Eds.Das.Web.ViewModels.ProviderViewModel

@{
    ViewBag.Title = "Provider - " + @Model.Name;
}
<main id="content">

    <p class="small-btm-margin">
        @Html.RenderAIfExists(@Model.SearchResultLink?.Title, @Model.SearchResultLink?.Url, "link-back")
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div class="hgroup">
                <h1 class="heading-xlarge" id="provider-name">
                    @Model.Name
                </h1>
                <div id="marketing" class="provider-marketing-info">
                    @Html.MarkdownToHtml(Model.ProviderMarketingInfo)
                    <p class="disclaimer">
                        <i>Posted by @Model.Name</i>
                    </p>
                </div>
                
            </div>
        </div>

        <div class="column-third">
            @using (Html.BeginForm("StandardResults", "Provider", FormMethod.Get, new { @class = "search-box" }))
            {
                <div class="related-container">
                    <aside class="related">
                        <h2 class="heading-medium">Training provider quality assessment</h2>
                        @GetSatisfactionsHtml()
                    </aside>
                </div>
            }
        </div>
    </div>

    <section>
        <header>
            <h2 class="heading-large apprenticeship-name-level">
                @Model.ApprenticeshipNameWithLevel
            </h2>
        </header>
        <dl class="data-list">
            @GetStandardPropertyAsLinkHtml("Website course page", "course-link", "apprenticeshipContactTitle", "apprenticeshipContact", @Model.Apprenticeship.ApprenticeshipInfoUrl)
            @GetStandardPropertyAsLinkHtml("Website contact page", "contact-link", "providerContactTitle", "providerContact", @Model.ContactInformation.ContactUsUrl)
            @GetStandardPropertyHtml("Phone", "phone", Model.ContactInformation.Phone)
            @GetEmailPropertyHtml("Email", "email", Model.ContactInformation.Email)
            @GetDeliveryModesHtml("Training structure", Model.DeliveryModes)
            @ShowTrainingLocation("Training location")
        </dl>

    </section>

    <section>
        <header>
            <h1 class="heading-medium">Apprenticeship training information</h1>
        </header>
        <p class="apprenticeship-marketing-info">@Html.MarkdownToHtml(Model.Apprenticeship.ApprenticeshipMarketingInfo)</p>
    </section>
</main>

@helper ShowTrainingLocation(string title)
{
if (@Model != null)
{
        <dt class="training-location-title">@title</dt>

    if (@Model.DeliveryModes.Count == 1 && @Model.DeliveryModes.Contains("100PercentEmployer"))
    {
            <dd id="training-location" class="training-location">Training will take place at your location</dd>
    }
    else
    {
        <dd id="training-location" class="training-location">@Model.Location.LocationName @Model.Address.Address1 @Model.Address.Address2 @Model.Address.Postcode</dd>
    }
}
}

@helper GetStandardPropertyHtml(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt class="phone-title">@title</dt>
        <dd id="@id" class="phone">@Html.Raw(item)</dd>
    }
}

@helper GetEmailPropertyHtml(string title, string id, string item, bool hideIfEmpty = false)
{
if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
{
        <dt class="email-title">@title</dt>
        <dd id="@id" class="email"><a href="mailto:@Html.Raw(item)">@Html.Raw(item)</a></dd>
}
}

@helper GetStandardPropertyAsLinkHtml(string title, string cssClass, string classTitle, string classIdentifier, string url, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(url) || !hideIfEmpty)
    {
        <dt class="@classTitle">@title</dt>
        <dd>
            @Html.RenderAIfExists(@url, $"http://{url}", $"{cssClass} {classIdentifier}", "_blank")
        </dd>
    }
}
@helper GetSatisfactionsHtml()
{
    <p>
        <b>Learner satisfaction:</b>
        <br/>
        @if (@Model.LearnerSatisfactionMessage != "No data available")
        {
            <span id="learner-satisfaction" class="heading-large">
                @Model.LearnerSatisfactionMessage
            </span>
        }
        else
        {
            <span id="learner-satisfaction">
                @Model.LearnerSatisfactionMessage
            </span>
        }
    </p>

    <p>
        <b>Employer satisfaction:</b>
        <br/>
        @if (@Model.EmployerSatisfactionMessage != "No data available")
        {
            <span id="employer-satisfaction" class="heading-large">
                @Model.EmployerSatisfactionMessage
            </span>
        }
        else
        {
            <span id="employer-satisfaction">
                @Model.EmployerSatisfactionMessage
            </span>
        }
    </p>
}

@helper GetDeliveryModesHtml(string title, List<string> items, bool hideIfEmpty = false)
{
    if (items != null)
    {
        <dt class="training-structure">@title</dt>
        <dd id="delivery-modes">
            <ul>
                @foreach (var item in items)
                {
                    switch (item)
                    {
                        case "100PercentEmployer":
                            <li class="hundred-percent-employer">@Html.Raw("at your location")</li>
                            break;
                        case "BlockRelease":
                            <li class="block-release">@Html.Raw("block release")</li>
                            break;
                        case "DayRelease":
                            <li class="day-release">@Html.Raw("day release")</li>
                            break;
                        default:
                            break;
                    }
                }
            </ul>
        </dd>
    }
}