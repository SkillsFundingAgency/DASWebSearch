@using Sfa.Eds.Das.Web.Extensions
@model Sfa.Eds.Das.Web.ViewModels.ProviderViewModel

@{
    ViewBag.Title = "Provider - " + @Model.Name;
}
<main id="content">

    <p class="small-btm-margin">
        @Html.RenderAIfExists(@Model.SearchResultLink?.Title, @Model.SearchResultLink?.Url, "link-back")
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div class="hgroup">
                <h1 class="heading-xlarge">
                    @Model.Name
                </h1>
                <p>@Model.ProviderMarketingInfo</p>

            </div>
        </div>

        <div class="column-third">
            @using (Html.BeginForm("SearchResults", "Provider", FormMethod.Get, new { @class = "search-box" }))
            {
                <div class="related-container">
                    <aside class="related">
                        <h2 class="heading-medium">Provider quality assessment</h2>
                        <h3>Learner satisfaction: @Model.LearnerSatisfaction %</h3>
                        <h3>Employer satisfaction: @Model.EmployerSatisfaction %</h3>
                    </aside>
                </div>
            }
        </div>
    </div>

    <section>
        <header>
            <h2 class="heading-large">
                @Model.ApprenticeshipNameWithLevel
            </h2>
        </header>
        <dl class="data-list">
            @GetStandardPropertyAsLinkHtml("Website course page", @Model.Apprenticeship.ApprenticeshipInfoUrl)
            @GetStandardPropertyAsLinkHtml("Website contact page", @Model.ContactInformation.ContactUsUrl)
            @GetStandardPropertyHtml("Phone", Model.ContactInformation.Phone)
            @GetStandardPropertyHtml("Email", Model.ContactInformation.Email)
            @GetDeliveryModesHtml("Training structure", Model.DeliveryModes)
            @ShowTrainingLocation("Training location")
        </dl>
    </section>
</main>


@helper ShowTrainingLocation(string title)
{
    if (@Model != null)
    {
        if (@Model.DeliveryModes.Count == 1 && @Model.DeliveryModes.Contains("100PercentEmployer"))
        {
                <dt>@title</dt>
                <dd>Training will take place at your location</dd>
        }
        else
        {
                <dt>@title</dt>
                <dd>@Model.Location.LocationName @Model.Address.Address1 @Model.Address.Address2 @Model.Address.Postcode</dd>
        }
    }
}

@helper GetStandardPropertyHtml(string title, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
            <dt>@title</dt>
            <dd>@Html.Raw(item)</dd>
    }
}

@helper GetStandardPropertyAsLinkHtml(string title, string url, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(url) || !hideIfEmpty)
    {
            <dt>@title</dt>
                <dd><a href="@url" target="_blank">@url</a></dd>
    }
}

@helper GetDeliveryModesHtml(string title, List<string> items, bool hideIfEmpty = false)
{
    if (items != null)
    {
            <dt>@title</dt>
            <dd>
                <ul>
                    @foreach (var item in items)
                    {
                        switch (item)
                        {
                            case "100PercentEmployer":
                                <li>@Html.Raw("at your location")</li>
                                break;
                            case "BlockRelease":
                                <li>@Html.Raw("block release")</li>
                                break;
                            case "DayRelease":
                                <li>@Html.Raw("day release")</li>
                                break;
                            default:
                                break;
                        }
                    }
                </ul>
            </dd>
    }
}