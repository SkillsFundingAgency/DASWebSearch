@using Sfa.Eds.Das.Web.Extensions
@model Sfa.Eds.Das.Web.ViewModels.StandardViewModel

@{
    ViewBag.Title = "Standard - " + @Model.Title;
}

<main id="content">

    <p class="small-btm-margin">
        @Html.RenderAIfExists(@Model.SearchResultLink?.Title, @Model.SearchResultLink?.Url, "link-back")
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div class="hgroup">
                <h1 class="heading-xlarge">
                    <span class="heading-secondary">Apprenticeship standard and assessment plan</span>
                    @Model.Title
                </h1>
                @if (!string.IsNullOrEmpty(@Model.IntroductoryTextHtml))
                {
                    <div class="standard-result-summary">
                        @Html.Raw(@Model.IntroductoryTextHtml)
                    </div>
                }
            </div>
        </div>

        <div class="column-third">
            @using (Html.BeginForm("SearchResults", "Provider", FormMethod.Get, new { @class = "search-box" }))
            {
                <div class="related-container">
                    <aside class="related">

                        <h2 class="heading-medium">Find training providers</h2>
                        <form action="/g-cloud/search" method="get" class="search-box">
                            <div class="form-group @(@Model.HasError ? " error" : "")">
                                <label class="form-label" for="postcode">
                                    Enter postcode@* or partial postcode *@
                                    <p>
                                        @{
                                            Html.RenderPartial("_BlankFieldErrorMessage");
                                        }
                                    </p>
                                </label>
                                <input type="hidden" id="standardid" name="standardid" class="text-box form-control" value="@Model.StandardId">
                                <input type="search" id="postcode" name="PostCode" class="text-box form-control" maxlength="200" placeholder="">
                            </div>
                            <input class="button margin-top-x2" id="submit-keywords" type="submit" value="Search" />
                        </form>

                    </aside>
                </div>
             }

            </div>
        </div>

        <section>
            <header>
                <h2 class="heading-large">
                    Summary of apprenticeship standard
                </h2>
            </header>
            <dl class="data-list">
                @GetStandardProperty("Overview of role", Model.OverviewOfRoleHtml)
                @GetStandardProperty("Level", @Model.NotionalEndLevel.ToString())
                @GetStandardProperty("Typical length", @Model.TypicalLengthMessage)
                @GetStandardProperty("Entry requirements", Model.EntryRequirementsHtml)
                @GetStandardProperty("What apprentices will learn", Model.WhatApprenticesWillLearnHtml)
                @GetStandardProperty("Qualifications", Model.QualificationsHtml)
                @GetStandardProperty("Professional registration", Model.ProfessionalRegistrationHtml, true)
            </dl>
            @if (!string.IsNullOrEmpty($"{Model.AssessmentPlanPdfUrlTitle}{Model.StandardPdfUrlTitle}"))
            {
                <div class="panel-indent panel-indent-info">
                    <h2 class="heading-large">
                        Documents
                    </h2>
                    <ul>
                        @GetDocumentItem(@Model.StandardPdfUrl, @Model.StandardPdfUrlTitle)
                        @GetDocumentItem(@Model.AssessmentPlanPdfUrl, @Model.AssessmentPlanPdfUrlTitle)
                    </ul>
                </div>
            }
        </section>

</main>


@helper GetStandardDetailItem(string title, string item, string unit = "")
{
    if (!string.IsNullOrEmpty(item))
    {
            <dt>@title</dt>
            <dd>@item @unit</dd>
    }
}


@helper GetStandardProperty(string title, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {

        <dt>@title</dt>
        <dd>@Html.Raw(item)</dd>

    }
}

@helper GetDocumentItem(string pdfUrl, string title)
{
    if (!string.IsNullOrEmpty(title))
    {
            <li>
                <a href="@pdfUrl">
                    @title
                </a>
                <p>
                    PDF, 268KB, 2 pages
                </p>
            </li>
    }
}