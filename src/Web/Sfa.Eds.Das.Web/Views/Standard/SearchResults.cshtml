@using Resources = Sfa.Eds.Das.Resources.EquivalenceLevels
@model Sfa.Eds.Das.Web.ViewModels.StandardSearchResultViewModel
@{
    ViewBag.Title = "Search Results";
}

<main id="content" role="main">
    @Html.ActionLink("Search", "Search", null, new { @class = "link-back" })
    <div id="results" class="grid-row">

        <div class="column-two-thirds">

            <div class="hgroup">

                <h1 class="heading-xlarge">
                    Search results
                </h1>

            </div>
            <p>
                @{
                    Html.RenderPartial("_SearchResultMessage");
                }
            </p>
                @foreach (var item in Model.Results)
                {
                    <article class="result">
                        <header>
                            <h2 class="result-title">
                                @Html.ActionLink(item.Title, "Detail", "Standard", new { @id = item.StandardId }, null)
                            </h2>
                        </header>
                            <dl class="result-data-list">
                                @GetStandardLevel(item.NotionalEndLevel.ToString())
                                @GetStandardDetailItem("Typical length:", item.TypicalLengthMessage)
                            </dl>
                    </article>
                }

        </div>

        <div class="column-third">

            <div class="related-container">
                <aside class="related" id="related">
                    <div class="inner group related-subsection">

                        <h2 id="parent-subsection">Help</h2>

                        <ul class="link-list">
                            <li>
                                <a href="help_standards.html">What is a standard</a>
                            </li>
                        </ul>

                    </div>
                    <div class="inner group">
                        <a class="return-to-top" href="#content">Return to top ↑</a>
                    </div>
                </aside>
            </div>

        </div>
    </div>
</main>

@helper GetStandardDetailItem(string title, string item, string unit = "")
{
    if (!string.IsNullOrEmpty(item))
    {
            <dt>@title</dt>
            <dd>@item @unit</dd>
    }
}

@helper GetStandardLevel(string item)
{
if (!string.IsNullOrEmpty(item))
{
    var equivalence = string.Empty;
    switch (int.Parse(@item))
    {
        case 1:
            equivalence = @Resources.FirstLevel;
            break;
        case 2:
            equivalence = @Resources.SecondLevel;
            break;
        case 3:
            equivalence = @Resources.ThirdLevel;
            break;
        case 4:
            equivalence = @Resources.FourthLevel;
            break;
        case 5:
            equivalence = @Resources.FifthLevel;
            break;
        case 6:
            equivalence = @Resources.SixthLevel;
            break;
        case 7:
            equivalence = @Resources.SeventhLevel;
            break;
        case 8:
            equivalence = @Resources.EighthLevel;
            break;
        default:
            break;

    }
        <dt class="minLength">Level:</dt>
        <dd class="minLength">@item (equivalent to @equivalence)</dd>
    }
}