/* 
 * Apprenticeship Programmes API
 *
 * Provides details about apprenticeship programmes, training providers and assessment organisations.
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using Sfa.Das.FatApi.Client.Client;
using Sfa.Das.FatApi.Client.Model;

namespace Sfa.Das.FatApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search all apprenticeships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults</returns>
        SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults SearchActiveApprenticeships (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null);

        /// <summary>
        /// Search all apprenticeships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>ApiResponse of SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults</returns>
        ApiResponse<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults> SearchActiveApprenticeshipsWithHttpInfo (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search all apprenticeships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>Task of SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults</returns>
        System.Threading.Tasks.Task<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults> SearchActiveApprenticeshipsAsync (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null);

        /// <summary>
        /// Search all apprenticeships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>Task of ApiResponse (SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults>> SearchActiveApprenticeshipsAsyncWithHttpInfo (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private Sfa.Das.FatApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = Sfa.Das.FatApi.Client.Client.Configuration.MergeConfigurations(
                Sfa.Das.FatApi.Client.Client.GlobalConfiguration.Instance,
                new Sfa.Das.FatApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sfa.Das.FatApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sfa.Das.FatApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sfa.Das.FatApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Sfa.Das.FatApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sfa.Das.FatApi.Client.Client.Configuration.MergeConfigurations(
                Sfa.Das.FatApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sfa.Das.FatApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sfa.Das.FatApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sfa.Das.FatApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(Sfa.Das.FatApi.Client.Client.ISynchronousClient client,Sfa.Das.FatApi.Client.Client.IAsynchronousClient asyncClient, Sfa.Das.FatApi.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sfa.Das.FatApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sfa.Das.FatApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sfa.Das.FatApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sfa.Das.FatApi.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sfa.Das.FatApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search all apprenticeships 
        /// </summary>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults</returns>
        public SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults SearchActiveApprenticeships (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null)
        {
             Sfa.Das.FatApi.Client.Client.ApiResponse<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults> localVarResponse = SearchActiveApprenticeshipsWithHttpInfo(keywords, page, pageSize, order, levels);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search all apprenticeships 
        /// </summary>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>ApiResponse of SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults</returns>
        public Sfa.Das.FatApi.Client.Client.ApiResponse< SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults > SearchActiveApprenticeshipsWithHttpInfo (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null)
        {
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new Sfa.Das.FatApi.Client.Client.ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchActiveApprenticeships");

            Sfa.Das.FatApi.Client.Client.RequestOptions requestOptions = new Sfa.Das.FatApi.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Sfa.Das.FatApi.Client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sfa.Das.FatApi.Client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keywords != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (levels != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "levels", levels))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults >("/v3/apprenticeship-programmes/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchActiveApprenticeships", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search all apprenticeships 
        /// </summary>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>Task of SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults</returns>
        public async System.Threading.Tasks.Task<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults> SearchActiveApprenticeshipsAsync (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null)
        {
             Sfa.Das.FatApi.Client.Client.ApiResponse<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults> localVarResponse = await SearchActiveApprenticeshipsAsyncWithHttpInfo(keywords, page, pageSize, order, levels);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search all apprenticeships 
        /// </summary>
        /// <exception cref="Sfa.Das.FatApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">Keywords to search for</param>
        /// <param name="page">Requested page (optional, default to 1)</param>
        /// <param name="pageSize">Results per page (optional, default to 20)</param>
        /// <param name="order">1 - Best match, 2 - Level (desc), 3 - Level (asc) (optional, default to 0)</param>
        /// <param name="levels">Levels, coma separated (optional)</param>
        /// <returns>Task of ApiResponse (SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults)</returns>
        public async System.Threading.Tasks.Task<Sfa.Das.FatApi.Client.Client.ApiResponse<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults>> SearchActiveApprenticeshipsAsyncWithHttpInfo (string keywords, int? page = null, int? pageSize = null, int? order = null, string levels = null)
        {
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new Sfa.Das.FatApi.Client.Client.ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchActiveApprenticeships");


            Sfa.Das.FatApi.Client.Client.RequestOptions requestOptions = new Sfa.Das.FatApi.Client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (keywords != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (levels != null)
            {
                foreach (var kvp in Sfa.Das.FatApi.Client.Client.ClientUtils.ParameterToMultiMap("", "levels", levels))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SFADASApprenticeshipsApiTypesV2ApprenticeshipSearchResults>("/v3/apprenticeship-programmes/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchActiveApprenticeships", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
