@using Sfa.Das.Sas.Resources
@using Sfa.Das.Sas.Web.Extensions
@model Sfa.Das.Sas.Web.ViewModels.StandardViewModel

@{
    ViewBag.Title = "Standard - " + @Model.Title;
}

<main id="content" class="standard-detail">

    <p class="small-btm-margin">
       @Html.ActionLink("Back to search page", "Search", "Apprenticeship", null, new { @class = "link-back" })
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div>
                <h1 class="heading-xlarge">
                    @Model.Title
                </h1>
                <div class="standard-result-summary">
                    This is an apprenticeship standard developed by a group of employers. It sets out what the apprentice needs to achieve and how they will be assessed.
                </div>
            </div>
        </div>


        <div class="column-third">
            <div class="related-container">
                <aside class="hidden-for-tablet">

                    <a class="button ui-find-training-providers" href="@Url.Action("SearchForProviders", "Apprenticeship", new { standardId = Model.StandardId })">
                        <i class="fa fa-search" aria-hidden="true"></i>
                        Find training Providers
                    </a>
                    @GetShortlistLink(@Model.StandardId, @Model.IsShortlisted)
                </aside>
                 </div>

            </div>
        </div>

        <section>
            <header>
                <h2 class="heading-large">
                    Summary of this apprenticeship standard
                </h2>
            </header>
            <dl class="data-list">
                @GetStandardProperty("Overview of role", "overview", Model.OverviewOfRole)
                @GetStandardProperty("Level", "level", $"{@Model.NotionalEndLevel} (equivalent to {@EquivalenveLevelService.GetApprenticeshipLevel(Model.NotionalEndLevel.ToString())})")
                @GetStandardProperty("Typical length", "length", @Model.TypicalLengthMessage)
                @GetStandardProperty("Entry requirements", "entry-requirements", Model.EntryRequirements)
                @GetStandardProperty("What apprentices will learn", "will-learn", Model.WhatApprenticesWillLearn)
                @GetStandardProperty("Qualifications", "qualifications", Model.Qualifications)
                @GetStandardProperty("Professional registration", "professional-registration", Model.ProfessionalRegistration, true)
            </dl>

            @if (!string.IsNullOrEmpty($"{Model.AssessmentPlanPdfUrlTitle}{Model.StandardPdfUrlTitle}"))
            {
                <div class="panel-indent panel-indent-info">
                    <h2 class="heading-large">
                        Documents
                    </h2>
                    <ul>
                        @GetDocumentItem(@Model.StandardPdf, "Standard")
                        @GetDocumentItem(@Model.AssessmentPlanPdf, "Assessment Plan")
                    </ul>
                </div>
            }

            <hr/>
            <div id="bottom-actions">
                <a class="button ui-find-training-providers" href="@Url.Action("SearchForProviders", "Apprenticeship", new { standardId = Model.StandardId, keywords = Model.SearchTerm })">
                    <i class="fa fa-search" aria-hidden="true"></i>
                    Find training Providers
                </a>
                @GetShortlistLink(@Model.StandardId, @Model.IsShortlisted)
            </div>

</section>

</main>

@helper GetStandardProperty(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">@Html.MarkdownToHtml(item)</dd>
    }
}

@helper GetDocumentItem(string pdfUrl, string title)
{
    if (!string.IsNullOrEmpty(title))
    {
        <li>
            <a href="@pdfUrl" target="_blank">
                @title
            </a>
        </li>
    }
}

@helper GetShortlistLink(int id, bool isShortlisted)
{
    if (isShortlisted)
    {
        @Html.ActionLink("Remove from shortlist", "RemoveStandard", "ShortList", 
            new { id }, 
            new {@class= "link shortlist-link standard-shortlist-link", rel="nofollow", data_standard = id, data_action = "remove" })
    }
    else
    {
        @Html.ActionLink("Shortlist apprenticeship", "AddStandard", "ShortList", 
            new { id }, 
            new { @class = "link shortlist-link standard-shortlist-link", rel="nofollow", data_standard = id, data_action = "add" })
    }
}