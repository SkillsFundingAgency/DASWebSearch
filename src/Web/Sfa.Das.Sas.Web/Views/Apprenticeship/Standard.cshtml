@using System.Globalization
@using Sfa.Das.Sas.Resources
@using Sfa.Das.Sas.Web.Extensions
@model Sfa.Das.Sas.Web.ViewModels.StandardViewModel
@{
    ViewBag.Title = Model.Title + " - Apprenticeship Standard";
    ViewBag.Description = Model.OverviewOfRole;
    var areOrganisationsPresent = Model.AssessmentOrganisations != null && Model.AssessmentOrganisations.Any();
}

<main id="content" class="standard-detail">
    <div class="grid-row">
        <div class="column-two-thirds">
            

            @if (Model.ReturnToApprenticeshipSearch)
            {
                @Html.ActionLink("Back", "SearchResults", new { @keywords = Model.SearchTerm }, new { @class = "link-back" })
            }
            else
            {
                @Html.ActionLink("Back", Model.Ukprn,"Provider", new { @keywords = Model.SearchTerm }, new { @class = "link-back" })
            }
            <div>
                <h1 class="heading-xlarge">
                    @Model.Title
                </h1>
                <p class="lede">@Model.OverviewOfRole</p>
                @if (Model.LastDateForNewStarts.HasValue && Model.LastDateForNewStarts.Value <= DateTime.Today.AddYears(1))
                {
                    <br/>
                    <div class="notice">
                        <i class="icon icon-important">
                            <span class="visuallyhidden">Warning</span>
                        </i>
                        <strong id="apprenticeship-closed-message" class="bold-small">
                            This apprenticeship is closed to new starters from @Model.DayAfterLastDateForNewStartsFormatted

                        </strong>
                    </div>
                }
            </div>
        </div>
        <div class="column-third">
            <div class="related-container">
                <aside class="hidden-for-mobile-tablet">
                    <a class="button ui-find-training-providers" rel="nofollow" target="find-training-providers" id="ga-find-provider-top" href="@Url.Action("SearchForStandardProviders", "Apprenticeship", new { standardId = Model.StandardId, keywords = Model.SearchTerm })">
                        @Model.FindApprenticeshipTrainingText
                    </a>
                </aside>
            </div>
        </div>
    </div>
    <section>
        <header>
            <h2 class="heading-large">
                Summary of this apprenticeship standard
            </h2>
        </header>
        <dl class="data-list">
            @GetStandardProperty("Level", "level", $"{@Model.Level} (equivalent to {EquivalenceLevelService.GetApprenticeshipLevel(Model.Level.ToString())})")
            @GetDurationProperty("Typical length", "length", Model.Duration.ToString())
            <dt>Current funding band</dt>
            <dd id="funding-cap">
                Up to @GetFundingCapFormatted(Model.MaxFunding) per apprentice.<br />
                @GetNextFundingMessage(Model.NextEffectiveFrom, Model.NextFundingCap)
                <a href="https://www.gov.uk/guidance/employing-an-apprentice-technical-guide-for-employers#funding-for-your-apprenticeship" target="_blank" rel="external">More information about funding</a>
            </dd>

            @GetStandardProperty("Entry requirements", "entry-requirements", Model.EntryRequirements)
            @GetStandardProperty("What apprentices will learn", "will-learn", Model.WhatApprenticesWillLearn)
            @GetStandardProperty("Qualifications", "qualifications", Model.Qualifications)
            @GetStandardProperty("Professional registration", "professional-registration", Model.ProfessionalRegistration, true)

            @if (areOrganisationsPresent == false)
            {
                const string noDetails = @"A government-approved organisation must assess apprentices towards the end of their apprenticeship.<br/><br/> " +
                                         "This end-point assessment ensures apprentices achieve the skills, training and any qualifications necessary to complete their apprenticeship. <br/><br/>" +
                                         "You can download the assessment plan from the Institute for Apprenticeships. " +
                                         "There are no end-point assessment organisations for this apprenticeship yet. " +
                                         "Please email <a href='mailto:apprentice.assessment@education.gov.uk' target='_blank'>apprentice.assessment@education.gov.uk</a> if you urgently need an end-point assessment organisation.";
                @GetStandardProperty("How apprentices are assessed", "no-assessment-organisations", noDetails)
            }

            @if (areOrganisationsPresent)
            {
                <dt>End Point Assessment</dt>
                <dd>
                    <details>
                        <summary><span class="summary" style="text-decoration: none">View a list of end point assessment organisations for this standard</span></summary>
                        <table class="responsive">
                            <thead>
                            <tr>
                                <th scope="col">Organisation</th>
                                <th scope="col">Phone Number</th>
                                <th scope="col">Email</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var organisation in Model.AssessmentOrganisations)
                            {
                                <tr>
                                    <td class="organisation-name" data-label="organisation">
                                        @if (string.IsNullOrEmpty(organisation.Website))
                                        {
                                            @organisation.Name
                                        }
                                        else
                                        {
                                            var linkProtocol = organisation.Website.StartsWith("http") ? string.Empty : "http://";
                                            <a href="@linkProtocol@organisation.Website" target="_blank">@organisation.Name</a>
                                        }
                                    </td>
                                    <td class="phone-number" data-label="phone-number">@organisation.Phone</td>
                                    <td class="email" data-label="email"><a href="mailto:@organisation.Email" target="_blank">@organisation.Email</a></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </details>
                </dd>
            }

            @GetMoreInformationProperty(Model.StandardPageUri)
        </dl>
        

        <div id="bottom-actions">
            <a class="button btn-find-trng-prov" rel="nofollow"  target="find-training-providers" id="ga-find-provider-bottom" href="@Url.Action("SearchForStandardProviders", "Apprenticeship", new { standardId = Model.StandardId, keywords = Model.SearchTerm })">
                @Model.FindApprenticeshipTrainingText
            </a>
        </div>
    </section>
</main>

@helper GetStandardProperty(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">@Html.MarkdownToHtml(item)@if (item == null){ @Html.Raw("&nbsp;") }</dd>
    }
}

@helper GetMoreInformationProperty(string link)
{
    {
        var details = "The Institute for Apprenticeships has more detailed information about this apprenticeship.";
        if (link!=null && link.Trim() != string.Empty)
        {
            details = @"The Institute for Apprenticeships has more <a href='" + link + "' target='_blank'>detailed information</a> about this apprenticeship.";
        }

        <dt>More Information</dt>
        <dd id="more-information">@Html.MarkdownToHtml(details)</dd>
    }
}

@helper GetDurationProperty(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt>@title</dt>
        <dd id="@id">@item months</dd>
    }
}

    }
}

@helper GetNextFundingMessage(DateTime? nextEffectiveFrom, int? nextFundingCap)
{

    if (nextEffectiveFrom == null || nextFundingCap == null || nextFundingCap == Model.MaxFunding)
    {
        return;
    }

    var nextFundingCapFormatted = GetFundingCapFormatted(nextFundingCap.Value);
    var nextEffectiveFromFormatted = nextEffectiveFrom.Value.ToString("dd MMMM yyyy");

    <div class='notice'>
        <i class='icon icon-important'>
            <span class='visuallyhidden'>
                Warning
            </span>
        </i>
        <strong class='bold-small'>
            The funding band maximum for this apprenticeship will change to @nextFundingCapFormatted from @nextEffectiveFromFormatted
        </strong>
    </div>
    }

@functions
    {

    private string GetFundingCapFormatted(int value)
        {
            return value.ToString("C0", new CultureInfo("en-GB"));
        }
    }