@using Sfa.Das.Sas.Resources
@using Sfa.Das.Sas.Web.Extensions
@using StructureMap.Query
@model Sfa.Das.Sas.Web.ViewModels.StandardViewModel

@{
    ViewBag.Title = "Standard - " + @Model.Title;
}

<main id="content" class="standard-detail">

    <p class="small-btm-margin">
        @Html.RenderAIfExists(@Model.SearchResultLink?.Title, @Model.SearchResultLink?.Url, "link-back")
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div>
                <h1 class="heading-xlarge">
                    @Model.Title
                </h1>
                    <div class="standard-result-summary">
                        This is an apprenticeship standard developed by a group of employers. It sets out what the apprentice needs to achieve and how they will be assessed.
                    </div>
            </div>
        </div>


        <div class="column-third">
            <div class="related-container">
                <aside class="related">
                    @CreateSearchForm("hidden-for-mobile", "postcode-form-aside", "search-box-aside")
                </aside>
                 </div>

            </div>
        </div>

        <section>
            <header>
                <h2 class="heading-large">
                    Summary of this apprenticeship standard
                </h2>
            </header>
            <dl class="data-list">
                @GetStandardProperty("Overview of role", "overview", Model.OverviewOfRole)
                @GetStandardProperty("Level", "level", $"{@Model.NotionalEndLevel} (equivalent to {@EquivalenveLevelService.GetApprenticeshipLevel(Model.NotionalEndLevel.ToString())})")
                @GetStandardProperty("Typical length", "length", @Model.TypicalLengthMessage)
                @GetStandardProperty("Entry requirements", "entry-requirements", Model.EntryRequirements)
                @GetStandardProperty("What apprentices will learn", "will-learn", Model.WhatApprenticesWillLearn)
                @GetStandardProperty("Qualifications", "qualifications", Model.Qualifications)
                @GetStandardProperty("Professional registration", "professional-registration", Model.ProfessionalRegistration, true)
            </dl>

            @if (!string.IsNullOrEmpty($"{Model.AssessmentPlanPdfUrlTitle}{Model.StandardPdfUrlTitle}"))
            {
                <div class="panel-indent panel-indent-info">
                    <h2 class="heading-large">
                        Documents
                    </h2>
                    <ul>
                        @GetDocumentItem(@Model.StandardPdf, "Standard")
                        @GetDocumentItem(@Model.AssessmentPlanPdf, "Assessment Plan")
                    </ul>
                </div>
            }

            <hr />

            @CreateSearchForm("", "postcode-form-bottom", "search-box-bottom")

        </section>

</main>

@helper CreateSearchForm(string cssClasses, string inputId, string searchBoxIdentifier)
{
    using (Html.BeginForm("StandardResults", "Provider", FormMethod.Get, new { @class = $"postcode-form search-box {cssClasses}", @id = inputId }))
    {
        <h2 class="heading-medium">Find training providers for this apprenticeship</h2>
                <div class="form-group @(@Model.HasError ? " error" : "")">
                    <label class="form-label" for="@searchBoxIdentifier">
                        Enter a full postcode.
                        <span class="error-message">
                            This field can't be blank
                        </span>
                    </label>
                    <input type="hidden" name="apprenticeshipid" class="text-box form-control" value="@Model.StandardId">
                    <input type="hidden" name="Inputid" value="@inputId"/>
                    <input type="search" name="PostCode" id="@searchBoxIdentifier" class="text-box form-control postcode-search-box" maxlength="200" placeholder="">
                </div>
                <input class="button margin-top-x2 postcode-search-button" type="submit" value="Search" />
    }
}

@helper GetStandardProperty(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {

        <dt>@title</dt>
        <dd id="@id">@Html.MarkdownToHtml(item)</dd>

    }
}

@helper GetDocumentItem(string pdfUrl, string title)
{
    if (!string.IsNullOrEmpty(title))
    {
            <li>
                <a href="@pdfUrl" target="_blank">
                    @title
                </a>
            </li>
    }
}