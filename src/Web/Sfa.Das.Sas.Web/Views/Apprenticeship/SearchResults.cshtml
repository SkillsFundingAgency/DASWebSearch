@using Sfa.Das.Sas.Web.ViewModels
@model ApprenticeshipSearchResultViewModel
@{
    ViewBag.Title = "Search Results";
}
<main id="content" role="main">
    <div id="apprenticeship-results" class="grid-row">
        <div class="column-two-thirds">
            <div class="hgroup">
                <h1 class="heading-xlarge">
                    Search results
                </h1>
                <p>
                    @{
                        Html.RenderPartial("_SearchResultMessage");
                    }
                </p>
            </div>
        </div>

    </div>
    <div class="grid-row">
        <div class="column-one-third">
            <div class="editSearch">
                <h2 class="heading-medium"><a href="#EditSearch">Edit search</a></h2>
                <div id="EditSearch">
                    @FilterForm("filter-box")
                </div>
            </div>
        </div>

        <div class="column-two-thirds">
            
            @if (!Model.HasError && Model.TotalResults > 0)
            {
                <div>
                    <form method="GET" id="search-results-order">
                        <input type="hidden" name="Keywords" value="@Model.SearchTerm" />
                        <input type="hidden" name="page" value="@Model.ActualPage" />
                        <input type="hidden" name="take" value="@Model.ResultsToTake" />
                        @foreach (var level in Model.AggregationLevel.Where(level => level.Checked))
                        {
                            <input type="hidden" name="SelectedLevels" value="@level.Value" />
                        }
                        <div class="form-block">
                            <label for="select-order">Sort by</label>
                            <select name="order" id="select-order" class="form-control form-control-1-3">
                                <option selected="@(Model.SortOrder=="1")" value="1">Best match</option>
                                <option selected="@(Model.SortOrder=="2")" value="2">Level (high to low)</option>
                                <option selected="@(Model.SortOrder=="3")" value="3">Level (low to high)</option>
                            </select>
                            <button type="submit" value="Sort" class="button">Sort</button>
                        </div>
                    </form>
                </div>
            }

            @foreach (var item in Model.Results)
                {
                <article class="result @(item.ApprenticeshipType)-result" id="@(item.ApprenticeshipType)-@(item.StandardId != 0 ? item.StandardId : item.FrameworkId)">
                    <header>
                        @if (item.StandardId != 0)
                        {
                            @GetStandardTitle(item)
                        }
                        else
                        {
                            @GetFrameworkTitle(item)
                        }
                    </header>
                    <dl class="result-data-list">
                        @GetApprenticeshipDetailItem("Level:", "level", item.Level)
                        @GetApprenticeshipDetailItem("Typical length:", "length", item.TypicalLengthMessage)
                    </dl>
                </article>
            }

            <div class="page-navigation">
                @GetPaginationBackLink()
                @GetPaginationNextLink()
            </div>
        </div>



    </div>
</main>

@if (Model.TotalResults == 0)
{
    <script>
        window.onload = function() {
            SearchAndShortlist.analytics.pushEvent("Apprenticeship Search", "No results", "Search");
        }
    </script>
}

@helper GetPaginationBackLink()
{
    if (Model.ActualPage > 1)
    {
        var previousPage = @Model.ActualPage - 1;
        var title = $"Previous page {@previousPage} of {@Model.LastPage}";
        var url = @Url.Action("SearchResults", "Apprenticeship", GetNavigationRouteValues(previousPage, Model.AggregationLevel, Model.SortOrder), null);
            <a href="@url" style="visibility: visible" class="page-navigation__btn prev">
                <i class="arrow-button fa fa-angle-left"></i>
                <span class="description">Previous <span class="hide-mob">page</span></span>
                <span class="counter">@previousPage of @Model.LastPage</span>
            </a>
    }
}


@helper GetPaginationNextLink()
{
    if (Model.ActualPage < Model.LastPage && Model.ActualPage >= 0)
    {
        var nextPage = @Model.ActualPage + 1;
        var title = $"Next page {@nextPage} of {@Model.LastPage}";

        var url = @Url.Action("SearchResults", "Apprenticeship", GetNavigationRouteValues(nextPage, Model.AggregationLevel, Model.SortOrder), null);
            <a href="@url" style="visibility: visible" class="page-navigation__btn next">
                <i class="arrow-button fa fa-angle-right"></i>
                <span class="description">Next <span class="hide-mob">page</span></span>
                <span class="counter">@nextPage of @Model.LastPage</span>
            </a>
    }
}


@functions
{
    RouteValueDictionary GetNavigationRouteValues(int page, IEnumerable<LevelAggregationViewModel> selectedLevels, string order)
    {

        var rv = new RouteValueDictionary { { "keywords", Model.SearchTerm }, { "page", page }, { "order", order }, { "take", Model.ResultsToTake } };
        int i = 0;
        foreach (var level in selectedLevels.Where(m => m.Checked))
        {
            rv.Add("SelectedLevels[" + i + "]", level.Value);
            i++;
        }
        return rv;
    }
}


@helper GetStandardTitle(ApprenticeshipSearchResultItemViewModel item)
{
    <h2 class="result-title">
        @Html.ActionLink(item.Title, "Standard", "Apprenticeship", new { @id = item.StandardId, @keywords = Model.SearchTerm }, null) 
        <span>new</span>
    </h2>
}

@helper GetFrameworkTitle(ApprenticeshipSearchResultItemViewModel item)
{
    <h2 class="result-title">
        @Html.ActionLink(item.Title, "Framework", "Apprenticeship", new { @id = item.FrameworkId, @keywords = Model.SearchTerm }, null)
    </h2>
}

@helper GetApprenticeshipDetailItem(string title, string id, string item, string unit = "")
{
    if (!string.IsNullOrEmpty(item))
    {
        <dt>@title</dt>
        <dd class="@id">@item @unit</dd>
    }
}

@helper FilterForm(string className)
{
    if (Model.TotalResults > 0)
    {
        <div class="filters-block @className">
            <form method="get" autocomplete="off">
                <input type="hidden" name="Keywords" value="@Model.SearchTerm" />
                <input type="hidden" name="Page" value="@Model.ActualPage"/>
                <input type="hidden" name="order" value="@Model.SortOrder" />
                <input type="hidden" name="take" value="@Model.ResultsToTake" />

                <fieldset class="filters filters-accordion">
                    <h2 class="toggler heading-small">Apprenticeship Level</h2>
                    <div class="toggled-content">
                        <ul name="alist22">
                            @foreach (var item in Model.AggregationLevel.OrderBy(m => m.Value))
                            {
                                <li>
                                    <input value="@item.Value" id="SelectedLevels_@item.Value" name="SelectedLevels" type="checkbox" @Html.Raw(item.Checked ? "checked" : "") @Html.Raw(item.Count == 0 ? "disabled" : "")/>
                                    <label for="SelectedLevels_@item.Value" class="@Html.Raw(item.Count == 0 ? "disabled" : "")">Level @item.Value (@item.Count)</label>
                                </li>
                            }
                        </ul>
                    </div>
                </fieldset>
                <input type="submit" class="button" value="Update results" />
            </form>
        </div>
    }
}