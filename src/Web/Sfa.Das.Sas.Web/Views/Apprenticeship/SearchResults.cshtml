@using Sfa.Das.Sas.Web.ViewModels
@model ApprenticeshipSearchResultViewModel
@{
    ViewBag.Title = "Search Results";
}
<main id="content" role="main">
    <p class="small-btm-margin">
        @Html.ActionLink("Back", "Search", null, new { @class = "link-back" })
    </p>
        <div id="apprenticeship-results" class="grid-row">

            <div class="column-two-thirds">

                <div>

                    <h1 class="heading-xlarge">
                        Search results
                    </h1>

                </div>
<p>
                @{
                    Html.RenderPartial("_SearchResultMessage");
                }
            </p>

            @foreach (var item in Model.Results)
            {
                <article class="result @(item.ApprenticeshipType)-result" id="@(item.ApprenticeshipType)-@(item.StandardId != 0 ? item.StandardId : item.FrameworkId)">
                    <header>
                        @if (item.StandardId != 0)
                        {
                            @GetStandardTitle(item)
                        }
                        else
                        {
                            @GetFrameworkTitle(item)
                        }
                    </header>
                    <dl class="result-data-list">
                        @GetApprenticeshipDetailItem("Level:", "level", item.Level)
                        @GetApprenticeshipDetailItem("Typical length:", "length", item.TypicalLengthMessage)
                    </dl>
                </article>
            }
                <div class="page-navigation">
                    @GetPaginationBackLink()
                    @GetPaginationNextLink()
                </div>
    </div>
</main>

@if (Model.TotalResults == 0)
{
    <script>
        window.onload = function() {
            SearchAndShortlist.analytics.pushEvent("Apprenticeship Search", "No results", "Search");
        }
    </script>
}

    @helper GetPaginationBackLink()
    {
        if (Model.ActualPage > 1)
        {
            var previousPage = @Model.ActualPage - 1;
            var title = $"Previous page {@previousPage} of {@Model.LastPage}";
            var url = $"SearchResults?keywords={Model.SearchTerm}&page={previousPage}";
                <a href="@url" style="visibility: visible" class="page-navigation__btn prev">
                    <i class="arrow-button fa fa-angle-left"></i>
                    <span class="description">Previous <span class="hide-mob">page</span></span>
                    <span class="counter">@previousPage of @Model.LastPage</span>
                </a>
        }
    }


    @helper GetPaginationNextLink()
    {
        if (Model.ActualPage < Model.LastPage)
        {
            var nextPage = @Model.ActualPage + 1;
            var title = $"Next page {@nextPage} of {@Model.LastPage}";

            var url = $"SearchResults?keywords={Model.SearchTerm}&page={nextPage}";
                <a href="@url" style="visibility: visible" class="page-navigation__btn next">
                    <i class="arrow-button fa fa-angle-right"></i>
                    <span class="description">Next <span class="hide-mob">page</span></span>
                    <span class="counter">@nextPage of @Model.LastPage</span>
                </a>
        }
    }


@helper GetStandardTitle(ApprenticeshipSearchResultItemViewModel item)
{
    <h2 class="result-title">
        @Html.ActionLink(item.Title, "Standard", "Apprenticeship", new { @id = item.StandardId }, null) 
        <span>new</span>
    </h2>    
}

@helper GetFrameworkTitle(ApprenticeshipSearchResultItemViewModel item)
{
    <h2 class="result-title">
        @Html.ActionLink(item.Title, "Framework", "Apprenticeship", new { @id = item.FrameworkId }, null)
    </h2>
}

@helper GetApprenticeshipDetailItem(string title, string id, string item, string unit = "")
{
    if (!string.IsNullOrEmpty(item))
    {
        <dt>@title</dt>
        <dd class="@id">@item @unit</dd>
    }
}
