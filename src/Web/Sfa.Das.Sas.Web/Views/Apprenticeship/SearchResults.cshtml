@using Sfa.Das.Sas.Web.ViewModels
@using Sfa.Das.Sas.Web.Extensions
@using Sfa.Das.Sas.Web.Helpers
@model ApprenticeshipSearchResultViewModel

@{
    ViewBag.Title = "Search Results";
}
<main id="content" role="main">
    <input type="hidden" value="@Model.SearchTerm" id="ga-search-term"/>
    <input type="hidden" value="@Model.Results.IsNullOrEmpty().ToString()" id="ga-no-result" />

    <p class="small-btm-margin">
        @Html.ActionLink("Start a new search", "Search", "Apprenticeship", new { }, new { @class = "link-back new-apprenticeship-search" })
    </p>
    <hgroup class="hgroup">
        <h1 class="heading-xlarge">
            Search results
        </h1>
        @{
            Html.RenderPartial("_SearchResultMessage");
        }
    </hgroup>

    @if (Model.TotalResults == 0)
    {
        <p>You can:</p>
        <ul class="list-bullet">
            <li>@Html.ActionLink("start your job role or keyword search again", "Search", "Apprenticeship", new { })</li>
        </ul>
    }

    <div class="grid-row">

        @if (!Model.HasError && Model.TotalResults > 0)
        {
            <div class="column-one-third">
                <div class="editSearch">
                    <h2 class="heading-medium">
                        <a href="#EditSearch">Filter results</a>
                    </h2>
                    <div id="EditSearch">
                        @FilterForm("filter-box")
                    </div>
                </div>
            </div>

            <div id="apprenticeship-results" class="column-two-thirds">
                <form method="GET" id="search-results-order">
                    <input type="hidden" name="Keywords" value="@Model.SearchTerm"/>
                    <input type="hidden" name="page" value="@Model.ActualPage"/>
                    <input type="hidden" name="take" value="@Model.ResultsToTake"/>
                    @foreach (var level in Model.AggregationLevel.Where(level => level.Checked))
                    {
                        <input type="hidden" name="SelectedLevels" value="@level.Value"/>
                    }
                    <div class="form-block">
                        <label for="select-order" class="form-label-bold">Sort by</label>
                        <select name="order" id="select-order" class="form-control form-control-1-3">
                            <option selected="@(Model.SortOrder == "1")" value="1">Best match</option>
                            <option selected="@(Model.SortOrder == "2")" value="2">Level (high to low)</option>
                            <option selected="@(Model.SortOrder == "3")" value="3">Level (low to high)</option>
                        </select>
                        <button type="submit" value="Sort" class="button">Sort</button>
                    </div>
                </form>

                @{ var index = (Model.ActualPage * Model.ResultsToTake) - Model.ResultsToTake; }
                @foreach (var item in Model.Results)
                {
                    index += 1;
                    <article class="result @(item.ApprenticeshipType)-result" 
                             id="@(item.ApprenticeshipType)-@(!item.StandardId.IsNullOrEmpty() ? item.StandardId : item.FrameworkId)">
                    <header>
                        @(!item.StandardId.IsNullOrEmpty() ? GetStandardTitle(item, index) : GetFrameworkTitle(item, index))
                    </header>
                    <dl class="result-data-list">
                        @GetApprenticeshipDetailItem("Level:", "level", item.Level)
                        @GetApprenticeshipDetailItem("Typical length:", "length", item.TypicalLengthMessage)
                    </dl>
                </article>
            }
                <div class="page-navigation">
                    @GetPaginationBackLink()
                    @GetPaginationNextLink()
                </div>
            </div>
        }

    </div>
</main>

@helper GetPaginationBackLink()
{
    if (Model.ActualPage <= 1)
    {
        return;
    }

    var previousPage = @Model.ActualPage - 1;
    var url = @Url.Action("SearchResults", "Apprenticeship", GetNavigationRouteValues(previousPage, Model.AggregationLevel, Model.SortOrder), null);
    <a href="@url" style="visibility: visible" class="page-navigation__btn prev">
        <i class="arrow-button fa fa-angle-left"></i>
        <span class="description">Previous <span class="hide-mob">page</span></span>
        <span class="counter">@previousPage of @Model.LastPage</span>
    </a>
}


@helper GetPaginationNextLink()
{
    if (Model.ActualPage >= Model.LastPage || Model.ActualPage < 0)
    {
        return;
    }

    var nextPage = @Model.ActualPage + 1;

    var url = @Url.Action("SearchResults", "Apprenticeship", GetNavigationRouteValues(nextPage, Model.AggregationLevel, Model.SortOrder), null);
    <a href="@url" style="visibility: visible" class="page-navigation__btn next">
        <i class="arrow-button fa fa-angle-right"></i>
        <span class="description">Next <span class="hide-mob">page</span></span>
        <span class="counter">@nextPage of @Model.LastPage</span>
    </a>
}


@functions
{
    RouteValueDictionary GetNavigationRouteValues(int page, IEnumerable<LevelAggregationViewModel> selectedLevels, string order)
    {

        var rv = new RouteValueDictionary { { "keywords", Model.SearchTerm }, { "page", page }, { "order", order }, { "take", Model.ResultsToTake } };
        var i = 0;
        foreach (var level in selectedLevels.Where(m => m.Checked))
        {
            rv.Add("SelectedLevels[" + i + "]", level.Value);
            i++;
        }
        return rv;
    }
}


@helper GetStandardTitle(ApprenticeshipSearchResultItemViewModel item, int index)
{
    <h2 class="result-title">
        @Html.ActionLink(item.Title, "Standard", "Apprenticeship", 
            new { @id = item.StandardId, @keywords = Model.SearchTerm}, 
            new { @attr_ga_result_interval = @ViewHelper.GetGaIndexAttrbute(index) } )
        <span class="tag tag-new">New</span>
    </h2>
}

@helper GetFrameworkTitle(ApprenticeshipSearchResultItemViewModel item, int index)
{
    <h2 class="result-title">
        @Html.ActionLink(item.Title, "Framework", "Apprenticeship", 
            new { @id = item.FrameworkId, @keywords = Model.SearchTerm }, 
            new { @attr_ga_result_interval = @ViewHelper.GetGaIndexAttrbute(index) })
    </h2>
}

@helper GetApprenticeshipDetailItem(string title, string id, string item, string unit = "")
{
    if (string.IsNullOrEmpty(item))
    {
        return;
    }
    <dt><b>@title</b></dt>
    <dd class="@id">@item @unit</dd>
}

@helper FilterForm(string className)
{
    if (Model.TotalResults <= 0)
    {
        return;
    }

    <div class="filters-block @className">
        <form method="get" autocomplete="off">
            <input type="hidden" name="Keywords" value="@Model.SearchTerm" />
            <input type="hidden" name="order" value="@Model.SortOrder" />

            <fieldset class="filters filters-accordion">
                <h2 class="toggler heading-small">Apprenticeship level</h2>
                <div class="toggled-content">
                    <ul name="alist22">
                        @foreach (var item in Model.AggregationLevel.OrderBy(m => m.Value))
                        {
                            <li>
                                <input value="@item.Value" id="SelectedLevels_@(item.Value)" name="SelectedLevels" type="checkbox" @Html.Raw(item.Checked ? "checked" : "") @Html.Raw(item.Count == 0 ? "disabled" : "") />
                                <label for="SelectedLevels_@(item.Value)" class="@Html.Raw(item.Count == 0 ? "disabled" : "")">level @item.Value (@item.Count)</label>
                            </li>
                        }
                    </ul>

                    <details>
                        <summary>Explain levels</summary>
                        <div class="panel panel-border-narrow">
                            <p>Apprenticeships are set at different levels of difficulty from the equivalent of GCSE (level 2) up to postgraduate (level 7)</p>
                            <p><a href="https://www.gov.uk/what-different-qualification-levels-mean/overview" target="_blank" rel="external">More about levels</a></p>
                        </div>
                    </details>
                    

                </div>
            </fieldset>
            <input type="submit" class="button" value="Update results" />
        </form>
    </div>
}