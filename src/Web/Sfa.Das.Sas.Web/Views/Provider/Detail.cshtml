@using Sfa.Das.Sas.Web.Extensions
@using Sfa.Das.Sas.Resources
<<<<<<< 85659ebd1e3a371455fdc155c0d6bd29a9acb4ff
@using Sfa.Das.Sas.Web.Models
@model Sfa.Das.Sas.Web.ViewModels.ProviderViewModel
=======
@model Sfa.Das.Sas.Web.ViewModels.ProviderCourseViewModel
>>>>>>> US1762: Fixes to the cookie store js code and also have intergrated the bookmark links into the provide page now. Still a few bugs to fix  but it is functionally working. Given the large amount of changes it seems worth checking this code in now and apply a fix in the next check-in as we are on a branch. Some refactoring and checking on code both server side and client side is needed to double check the functionaility is stable for all scenarios.

@{
    ViewBag.Title = "Provider - " + @Model.Name;
}
<main id="content" class="provider-detail">

    <p class="small-btm-margin">
        @Html.RenderAIfExists(@Model.SearchResultLink?.Title, @Model.SearchResultLink?.Url, "link-back")
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div>
                <h1 class="heading-xlarge" id="provider-name">
                    @Model.Name
                </h1>
                @GetShortlistLink(@Model.Apprenticeship.Code, @Model.Location.LocationId, @Model.ProviderId, @Model.IsShortlisted)
                <div id="marketing" class="provider-marketing-info">
                    @Html.MarkdownToHtml(Model.ProviderMarketingInfo)
                </div>

            </div>


            <section>
                <header class="hgroup">
                    <h2 class="heading-large apprenticeship-name-level">
                        @Model.ApprenticeshipNameWithLevel
                    </h2>
                    <b>Level:</b>
                    <span>
                        @Model.ApprenticeshipLevel (equivalent to @EquivalenveLevelService.GetApprenticeshipLevel(@Model.ApprenticeshipLevel))
                    </span>
                </header>
                <dl class="data-list">
                    @GetStandardPropertyAsLinkHtml("Website", "course-link", "apprenticeshipContactTitle", "apprenticeshipContact", @Model.Apprenticeship.ApprenticeshipInfoUrl, "training provider website")
                    @GetStandardPropertyHtml("Phone", "phone", Model.ContactInformation.Phone)
                    @GetEmailPropertyHtml("Email", "email", Model.ContactInformation.Email)
                    @GetStandardPropertyAsLinkHtml("Contact page", "contact-link", "providerContactTitle", "providerContact", @Model.ContactInformation.ContactUsUrl, "contact this training provider")
                    @GetDeliveryModesHtml("Training options", Model.DeliveryModes)
                    @ShowTrainingLocation("Training location")
                </dl>

            </section>

            <section>
                <header>
                    <h2 class="heading-large">Apprenticeship training information</h2>
                </header>
                <article class="apprenticeship-marketing-info">
                    @Html.MarkdownToHtml(Model.Apprenticeship.ApprenticeshipMarketingInfo)
                    <br />
                    <em>Content maintained by @Model.Name</em>
                </article>
            </section>



            <div class="survey-panel">
                <h2 class="bold-large">
                    Give us your feedback
                </h2>
                <p>
                    This is a new service and your feedback will help us improve it.<br />
                    Use the link below to take part in a short survey.
                </p>
                <a href="https://www.surveymonkey.co.uk/r/F3LCBG6" target="_blank" class="button">Take the survey</a>
            </div>
            <aside class="disclaimer">
                <h4 class="heading-small">Content disclaimer</h4>
                <p>
                    Skills Funding Agency cannot guarantee the accuracy of course information on this site and makes no representations about the quality of any courses which appear on the site. Skills Funding Agency is not liable for any losses suffered as a result of any party relying on the course information provided.
                </p>
            </aside>

        </div>


        <div class="column-third">
            @using (Html.BeginForm("StandardResults", "Provider", FormMethod.Get, new { @class = "search-box" }))
            {
                <div class="related-container">
                    <aside class="related">
                        <h2 class="heading-medium">
                            Training provider quality assessment
                        </h2>
                        @GetSatisfactionsHtml()
                        @GetShortlistLink(@Model.ProviderId, @Model.Apprenticeship.Code, @Model.Location.LocationId, @Model.IsShortlisted)
                    </aside>
                </div>
            }
        </div>
    </div>

</main>

@helper ShowTrainingLocation(string title)
{
if (@Model != null)
{
        <dt class="training-location-title">@title</dt>

    if (@Model.DeliveryModes.Count == 1 && @Model.DeliveryModes.Contains("100PercentEmployer"))
    {
        <dd id="training-location" class="training-location">
            Training takes place at your location
        </dd>
    }
    else
    {
        <dd id="training-location" class="training-location">
            @Model.Location.LocationName @Model.Address.Address1 @Model.Address.Address2 @Model.Address.Town @Model.Address.County @Model.Address.Postcode
        </dd>
    }
}
}

@helper GetStandardPropertyHtml(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt class="phone-title">@title</dt>
        <dd id="@id" class="phone">@Html.Raw(item)</dd>
    }
}

@helper GetEmailPropertyHtml(string title, string id, string item, bool hideIfEmpty = false)
{
if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
{
        <dt class="email-title">@title</dt>
        <dd id="@id" class="email"><a href="mailto:@Html.Raw(item)">@Html.Raw(item)</a></dd>
}
}

@helper GetStandardPropertyAsLinkHtml(string title, string cssClass, string classTitle, string classIdentifier, string url, string urlTitle = "")
{
    if (!string.IsNullOrEmpty(url))
    {
        var linkProtocol = url.StartsWith("http") ? string.Empty : "http://";
        <dt class="@classTitle">@title</dt>
        <dd>
            <a href="@linkProtocol@url" rel="external" target="_blank" class="@cssClass @classIdentifier">
                @if (string.IsNullOrEmpty(urlTitle))
                {
                    @url
                }
                else
                {
                    @urlTitle
                }
            </a>
        </dd>
    }
}
@helper GetSatisfactionsHtml()
{
    <p>
        <b>Employer satisfaction:</b>
        <span id="employer-satisfaction">
            @Model.EmployerSatisfactionMessage
        </span>
        @if (@Model.EmployerSatisfactionMessage != "No data available")
        {
            <div class="progress-container">
                <div class="progressbar" style="width: @Model.EmployerSatisfaction%"></div>
            </div>
        }
    </p>

    <p>
        <b>Learner satisfaction:</b>
        <span id="learner-satisfaction">
            @Model.LearnerSatisfactionMessage
        </span>
        @if (@Model.LearnerSatisfactionMessage != "No data available")
        {
            <div class="progress-container">
                <div class="progressbar" style="width:@Model.LearnerSatisfaction%"></div>
            </div>
        }

    </p>
}

@helper GetDeliveryModesHtml(string title, List<string> items, bool hideIfEmpty = false)
{
    if (items != null)
    {
        <dt class="training-structure">@title</dt>
        <dd id="delivery-modes">
            <ul>
                @if (items.Exists(m => m.Equals("DayRelease")))
                {
                    <li class="day-release">@Html.Raw("day release")</li>
                }
                @if (items.Exists(m => m.Equals("BlockRelease")))
                {
                    <li class="block-release">@Html.Raw("block release")</li>
                }
                @if (items.Exists(m => m.Equals("100PercentEmployer")))
                {
                    <li class="hundred-percent-employer">@Html.Raw("at your location")</li>
                }
            </ul>
            <details>
                <summary>Explain training options</summary>
                <div class="panel panel-border-narrow">
                    <p>
                        <span class="bold-small">Day release:</span> eg one day a week at the training provider's location.
                    </p>
                    <p>
                        <span class="bold-small">Block release:</span> eg 3-4 weeks at the training provider's location.
                    </p>
                    <p>
                        <span class="bold-small">At your location:</span> the provider comes to your workplace.
                    </p>
                </div>
            </details>
        </dd>
    }
}

<<<<<<< 85659ebd1e3a371455fdc155c0d6bd29a9acb4ff
@helper GetShortlistLink(int apprenticeship, int location, string provider, bool isShortlisted)
{
    if (isShortlisted)
    {
        @Html.ActionLink("Remove from shortlist", "RemoveProvider", "Shortlist", new { @providerId = provider, @locationId = location, @apprenticeshipId = apprenticeship }, null)
    }
    else
    {
    
        @Html.ActionLink("Shortlist provider", "AddProvider", "Shortlist", new { @providerId = provider, @locationId = location , @apprenticeshipId = apprenticeship }, null)
    }
}
=======
@helper GetShortlistLink(int providerId, int standardId, int locationId, bool isShortlisted)
{
    if (isShortlisted)
    {
        @Html.ActionLink("Remove from shortlist", "RemoveProvider", "ShortList",
            new { standardId, providerId, locationId},
            new {@class = "link shortlist-link provider-shortlist-link", rel = "nofollow", data_standard = standardId, data_provider = providerId, data_action = "remove"})
    }
    else
    {
        @Html.ActionLink("Shortlist provider", "AddProvider", "ShortList",
            new { standardId, providerId, locationId },
            new {@class = "link shortlist-link provider-shortlist-link", rel = "nofollow", data_standard = standardId, data_provider = providerId, data_action = "add"})
    }
}
>>>>>>> US1762: Fixes to the cookie store js code and also have intergrated the bookmark links into the provide page now. Still a few bugs to fix  but it is functionally working. Given the large amount of changes it seems worth checking this code in now and apply a fix in the next check-in as we are on a branch. Some refactoring and checking on code both server side and client side is needed to double check the functionaility is stable for all scenarios.
