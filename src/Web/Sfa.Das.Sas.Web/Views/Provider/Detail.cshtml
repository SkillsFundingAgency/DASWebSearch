@using Sfa.Das.Sas.Web.Extensions
@using Sfa.Das.Sas.Resources
@model Sfa.Das.Sas.Web.ViewModels.ProviderViewModel

@{
    ViewBag.Title = "Provider - " + @Model.Name;
}
<main id="content" class="provider-detail">

    <p class="small-btm-margin">
        @Html.RenderAIfExists(@Model.SearchResultLink?.Title, @Model.SearchResultLink?.Url, "link-back")
    </p>

    <div class="grid-row">

        <div class="column-two-thirds">
            <div>
                <h1 class="heading-xlarge" id="provider-name">
                    @Model.Name
                </h1>
                <div id="marketing" class="provider-marketing-info">
                    @Html.MarkdownToHtml(Model.ProviderMarketingInfo)
                </div>

            </div>


            <section>
                <header class="hgroup">
                    <h2 class="heading-large apprenticeship-name-level">
                        @Model.ApprenticeshipNameWithLevel
                    </h2>
                    <b>Level:</b>
                    <span>
                        @Model.ApprenticeshipLevel (equivalent to @EquivalenveLevelService.GetFrameworkLevel(@Model.ApprenticeshipLevel))
                    </span>
                </header>
                <dl class="data-list">
                    @GetStandardPropertyAsLinkHtml("Website", "course-link", "apprenticeshipContactTitle", "apprenticeshipContact", @Model.Apprenticeship.ApprenticeshipInfoUrl, "training provider website")
                    @GetStandardPropertyHtml("Phone", "phone", Model.ContactInformation.Phone)
                    @GetEmailPropertyHtml("Email", "email", Model.ContactInformation.Email)
                    @GetStandardPropertyAsLinkHtml("Contact page", "contact-link", "providerContactTitle", "providerContact", @Model.ContactInformation.ContactUsUrl, "contact this training provider")
                    @GetDeliveryModesHtml("Training options", Model.DeliveryModes)
                    @ShowTrainingLocation("Training location")
                </dl>

            </section>

            <section>
                <header>
                    <h2 class="heading-large">Apprenticeship training information</h2>
                </header>
                <article class="apprenticeship-marketing-info">
                    @Html.MarkdownToHtml(Model.Apprenticeship.ApprenticeshipMarketingInfo)
                </article>
            </section>

            <section>
                <p class="disclaimer">
                    <i>Content maintained by @Model.Name</i>
                </p>
            </section>

        </div>


        <div class="column-third">
            @using (Html.BeginForm("StandardResults", "Provider", FormMethod.Get, new { @class = "search-box" }))
            {
                <div class="related-container">
                    <aside class="related">
                        <h2 class="heading-medium">
                            Training provider quality assessment
                        </h2>
                        @GetSatisfactionsHtml()
                    </aside>
                </div>
            }
        </div>
    </div>

</main>

@helper ShowTrainingLocation(string title)
{
if (@Model != null)
{
        <dt class="training-location-title">@title</dt>

    if (@Model.DeliveryModes.Count == 1 && @Model.DeliveryModes.Contains("100PercentEmployer"))
    {
        <dd id="training-location" class="training-location">
            Training takes place at your location
        </dd>
    }
    else
    {
        <dd id="training-location" class="training-location">
            @Model.Location.LocationName @Model.Address.Address1 @Model.Address.Address2 @Model.Address.Postcode
        </dd>
    }
}
}

@helper GetStandardPropertyHtml(string title, string id, string item, bool hideIfEmpty = false)
{
    if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
    {
        <dt class="phone-title">@title</dt>
        <dd id="@id" class="phone">@Html.Raw(item)</dd>
    }
}

@helper GetEmailPropertyHtml(string title, string id, string item, bool hideIfEmpty = false)
{
if (!string.IsNullOrEmpty(item) || !hideIfEmpty)
{
        <dt class="email-title">@title</dt>
        <dd id="@id" class="email"><a href="mailto:@Html.Raw(item)">@Html.Raw(item)</a></dd>
}
}

@helper GetStandardPropertyAsLinkHtml(string title, string cssClass, string classTitle, string classIdentifier, string url, string urlTitle = "")
{
    if (!string.IsNullOrEmpty(url))
    {
        <dt class="@classTitle">@title</dt>
        <dd>
            <a href="http://@url" rel="external" target="_blank" class="@cssClass @classIdentifier">
                @if (string.IsNullOrEmpty(urlTitle))
                {
                    @url
                }
                else
                {
                    @urlTitle
                }
            </a>
        </dd>
    }
}
@helper GetSatisfactionsHtml()
{
    <p>
        <b>Employer satisfaction:</b>
        <span id="employer-satisfaction">
            @Model.EmployerSatisfactionMessage
        </span>
        @if (@Model.EmployerSatisfactionMessage != "No data available")
        {
            <div class="progress-container">
                <div class="progressbar" style="width: @Model.EmployerSatisfaction%"></div>
            </div>
        }
    </p>

    <p>
        <b>Learner satisfaction:</b>
        <span id="learner-satisfaction">
            @Model.LearnerSatisfactionMessage
        </span>
        @if (@Model.LearnerSatisfactionMessage != "No data available")
        {
            <div class="progress-container">
                <div class="progressbar" style="width:@Model.LearnerSatisfaction%"></div>
            </div>
        }

    </p>
}

@helper GetDeliveryModesHtml(string title, List<string> items, bool hideIfEmpty = false)
{
    if (items != null)
    {
        <dt class="training-structure">@title</dt>
        <dd id="delivery-modes">
            <ul>
                @if (items.Exists(m => m.Equals("DayRelease")))
                {
                    <li class="day-release">@Html.Raw("day release")</li>
                }
                @if (items.Exists(m => m.Equals("BlockRelease")))
                {
                    <li class="block-release">@Html.Raw("block release")</li>
                }
                @if (items.Exists(m => m.Equals("100PercentEmployer")))
                {
                    <li class="hundred-percent-employer">@Html.Raw("at your location")</li>
                }
            </ul>
                    <details>
                        <summary>Explain training options</summary>
                        <div class="panel panel-border-narrow">   
                            <p>
                                <span class="bold-small">Day release:</span> eg one day a week at the training provider's location.
                            </p>
                            <p>
                                <span class="bold-small">Block release:</span> eg 3-4 weeks at the training provider's location.
                            </p>
                            <p>
                                <span class="bold-small">At your location:</span> the provider comes to your workplace.
                            </p>
                        </div>
                    </details>                
        </dd>
    }
}