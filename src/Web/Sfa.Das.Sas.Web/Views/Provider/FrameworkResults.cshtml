@using Sfa.Das.Sas.Web.Extensions
@using Sfa.Das.Sas.Web.ViewModels
@model ProviderFrameworkSearchResultViewModel

@{
    ViewBag.Title = "Provider Search Results";
}

<main id="content" role="main">
    @if (Model.Hits.Count() != 0)
    {
        <p class="small-btm-margin">
            @Html.ActionLink("Find providers for a different postcode", "SearchForFrameworkProviders", "Apprenticeship", new { @frameworkId = Model.FrameworkId, @keywords = Model.SearchTerms }, new { @class = "link-back new-postcode-search" })
        </p>
    }
    <div>
        <div>
            <hgroup class="hgroup">
                <h1 class="heading-xlarge">
                    Search results
                </h1>
                @{
                    Html.RenderPartial("_FrameworkSearchResultMessage");
                }
            </hgroup>
        </div>
    </div>

    <div class="result-message">
        @if (Model.ShowNationalProviders && Model.TotalResults == 0)
        {
            <p id="framework-provider-search-message">
                Sorry, there are currently no results for the filters you applied.
            </p>
            <div>
                <p>You can:</p>
                <ul class="list list-bullet">
                    <li class="return-search-results">@Html.ActionLink("return to your apprenticeship training search results", "FrameworkResults", "Provider", new { @apprenticeshipid = @Model.FrameworkId, @postcode = @Model.PostCode, @keywords = @Model.SearchTerms }, new { })</li>
                    <li class="start-again">@Html.ActionLink("start your job role or keyword search again", "Search", "Apprenticeship")</li>
                </ul>
            </div>
        }
        else if (Model.TotalResults == 0)
        {
            <p>
                Sorry, there are currently no training providers for <b>@Model.Title, level @Model.FrameworkLevel</b> for '<b>@Model.PostCode</b>'.
            </p>
            <div>
                You can:
                <ul class="list list-bullet">
                    @if (Model.TotalProvidersCountry > 0)
                    {
                        <li class="total-providers-country">@Html.ActionLink($"view all ({@Model.TotalProvidersCountry}) training providers", "FrameworkResults", "Provider", new { @apprenticeshipId = @Model.FrameworkId, @postcode = Model.PostCode, @showAll = true }, new { @class = "" }) for <b>@Model.FrameworkName, level @Model.FrameworkLevel</b> in England</li>
                    }
                    <li class="return-search-results">@Html.ActionLink("return to your apprenticeship training search results", "SearchResults", "Apprenticeship", new { @keywords = @Model.SearchTerms }, new { })</li>
                    <li class="start-again">@Html.ActionLink("start your job role or keyword search again", "Search", "Apprenticeship")</li>
                </ul>
            </div>
        }
    </div>

    <div class="grid-row">
        <div class="column-third">
            <div class="editSearch">
                @if (Model.Hits.Any() && !Model.HasError)
                {
                    <h2 class="heading-medium">
                        <a href="#EditSearch">Filter results</a>
                    </h2>
                    <div id="EditSearch">
                        @FilterForm("filter-box")
                    </div>
                }
            </div>
        </div>

        <div id="provider-results" class="column-two-thirds">
            @{
                Html.RenderPartial("_FrameworkProviderInformation");
            }
            <div class="page-navigation">
                @GetPaginationBackLink()
                @GetPaginationNextLink()
            </div>
        </div>
    </div>

</main>



@if (Model.TotalResults == 0)
{
    <script>
        window.onload = function () {
            SearchAndShortlist.analytics.pushEvent("Provider Search", "No results", "Search");
        }
    </script>
}

@helper GetPaginationBackLink()
{
if (Model.ActualPage > 1)
{
    var previousPage = @Model.ActualPage - 1;
    var url = @Url.Action("FrameworkResults", "Provider", GetNavigationRouteValues(previousPage, Model.DeliveryModes), null);

        <a href="@url" style="visibility: visible" class="page-navigation__btn prev">
            <i class="arrow-button fa fa-angle-left"></i>
            <span class="description">Previous <span class="hide-mob">page</span></span>
            <span class="counter">@previousPage of @Model.LastPage</span>
        </a>
}
}


@helper GetPaginationNextLink()
{
if (Model.ActualPage < Model.LastPage)
{
    var nextPage = @Model.ActualPage + 1;

    var url = @Url.Action("FrameworkResults", "Provider", GetNavigationRouteValues(nextPage, Model.DeliveryModes), null);

        <a href="@url" style="visibility: visible" class="page-navigation__btn next">
            <i class="arrow-button fa fa-angle-right"></i>
            <span class="description">Next <span class="hide-mob">page</span></span>
            <span class="counter">@nextPage of @Model.LastPage</span>
        </a>
}
}

@helper FilterForm(string cssClass)
{
    if (!Model.DeliveryModes.IsNullOrEmpty())
    {
        var hideMenu = Model.DeliveryModes.All(deliveryMode => deliveryMode.Count == 0);

        if (@Model.TotalResults != 0 || !hideMenu)
        {
            <div class="filters-block @cssClass">
                <form method="get" autocomplete="off" action="@Model.AbsolutePath">
                    <input type="hidden" name="PostCode" value="@Model.PostCode" />
                    <input type="hidden" name="apprenticeshipid" value="@Model.FrameworkId" />
                    <input type="hidden" name="ShowAll" value="@Model.ShowAll.ToString()" />
                    <input type="hidden" name="keywords" value="@Model.SearchTerms" />
                    @{
                        Html.RenderPartial("_FilterProviders", Model.DeliveryModes);
                    }
                    @{
                        Html.RenderPartial("_FilterNationalProviders", Model.NationalProviders);
                    }
                    <input type="submit" value="Update results" class="button margin-top-x2 postcode-search-button" />
                </form>
            </div>
        }
    }
}

@functions
{
    RouteValueDictionary GetNavigationRouteValues(int page, IEnumerable<DeliveryModeViewModel> deliveryModes)
    {

        var rv = new RouteValueDictionary { { "apprenticeshipid", Model.FrameworkId }, { "postcode", Model.PostCode }, { "page", page }, { "showall", Model.ShowAll } };
        int i = 0;
        foreach (var deliveryMode in deliveryModes.Where(m => m.Checked))
        {
            rv.Add("DeliveryModes[" + i + "]", deliveryMode.Value);
            i++;
        }
        return rv;
    }
}
