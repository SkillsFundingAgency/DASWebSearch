@using Sfa.Das.Sas.Web.Extensions
@using Sfa.Das.Sas.Web.ViewModels
@model ProviderStandardSearchResultViewModel

@{
    ViewBag.Title = "Provider Search Results";
}

<main id="content" role="main">
    @Html.ActionLink("Back", "SearchForProviders", "Apprenticeship", new { @standardId = @Model.StandardId }, new { @class = "link-back" })
    <div id="provider-results" class="grid-row">

        <div class="column-two-thirds">

            <div class="hgroup">

                <h1 class="heading-xlarge">
                    Search results
                </h1>

            </div>
            <p>
                @{
                    Html.RenderPartial("_StandardSearchResultMessage");
                }
            </p>

        </div>

        <div class="column-third">
            @FilterForm("filter-box")
        </div>

        <div class="column-two-thirds">
            @{
                Html.RenderPartial("_StandardProviderInformation");
            }
            <div class="page-navigation">
                @GetPaginationBackLink()
                @GetPaginationNextLink()
            </div>
        </div>


    </div>
</main>

@if (Model.TotalResults == 0)
{
    <script>
        window.onload = function() {
            SearchAndShortlist.analytics.pushEvent("Provider Search", "No results", "Search");
        }
    </script> 
}

@helper GetPaginationBackLink()
{
    if (Model.ActualPage > 1)
    {
        var previousPage = @Model.ActualPage - 1;
        var url = @Url.Action("StandardResults", "Provider", GetNavigationRouteValues(previousPage, Model.DeliveryModes), null);

        <a href="@url" style="visibility: visible" class="page-navigation__btn prev">
            <i class="arrow-button fa fa-angle-left"></i>
            <span class="description">Previous <span class="hide-mob">page</span></span>
            <span class="counter">@previousPage of @Model.LastPage</span>
        </a>
    }
}


@helper GetPaginationNextLink()
{
    if (Model.ActualPage < Model.LastPage)
    {
        var nextPage = @Model.ActualPage + 1;

        var url = @Url.Action("StandardResults", "Provider", GetNavigationRouteValues(nextPage, Model.DeliveryModes), null);
        <a href="@url" style="visibility: visible" class="page-navigation__btn next">
            <i class="arrow-button fa fa-angle-right"></i>
            <span class="description">Next <span class="hide-mob">page</span></span>
            <span class="counter">@nextPage of @Model.LastPage</span>
        </a>
    }
}

@helper FilterForm(string cssClass)
{
if (!Model.DeliveryModes.IsNullOrEmpty())
{
        <div class="@cssClass">
            <form method="get" autocomplete="off" action="@Request.Url.AbsolutePath">
                <input type="hidden" name="PostCode" value="@Model.PostCode" />
                <input type="hidden" name="apprenticeshipid" value="@Model.StandardId" />
                @{
                    Html.RenderPartial("_FilterProviders", Model.DeliveryModes);
                }
                <input type="submit" value="Update results" class="button margin-top-x2 postcode-search-button" />
            </form>
        </div>
                    }
}

@functions
{
    RouteValueDictionary GetNavigationRouteValues(int page, IEnumerable<DeliveryModeViewModel> deliveryModes)
    {

        var rv = new RouteValueDictionary { { "apprenticeshipid", Model.StandardId }, { "postcode", Model.PostCode }, { "page", page } };
        int i = 0;
        foreach (var deliveryMode in deliveryModes.Where(m => m.Checked))
        {
            rv.Add("DeliveryModes[" + i + "]", deliveryMode.Value);
            i++;
        }
        return rv;
    }
}