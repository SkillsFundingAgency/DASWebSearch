@using Sfa.Das.Sas.Web.Extensions
@using Sfa.Das.Sas.Web.ViewModels
@model ProviderStandardSearchResultViewModel

@{
    ViewBag.Title = "Provider Search Results";
    ViewBag.Description = "The Find Apprenticeship Training service is for employers in England who want to find training courses for their apprentices and search for training providers.";
}

<main id="content" role="main">
    <input type="hidden" value="@Model.PostCode.FormatPostcode()" id="ga-postcode" />
    <input type="hidden" value="@Model.StandardName, level @Model.StandardLevel" id="ga-apprenticeship-title" />
    <input type="hidden" value="@Model.Hits.IsNullOrEmpty().ToString()" id="ga-no-result" />

    <p class="small-btm-margin">
        @if (Model.Hits.Count() != 0)
        {
            @Html.ActionLink("Back", "SearchForStandardProviders", "Apprenticeship", new { @standardId = Model.StandardId, @keywords = Model.SearchTerms, isLevyPayingEmployer = Model.IsLevyPayingEmployer, ukprn = Model.Ukprn }, new { @class = "link-back new-postcode-search" })

        }

        @{ Html.RenderPartial("_ManageApprenticeshipFunds", Model.ManageApprenticeshipFunds); }
    </p>

    <div>
        <div>
            <hgroup class="hgroup">
                <h1 class="heading-xlarge">
                    Search results
                </h1>
                @{
                    Html.RenderPartial("_StandardSearchResultMessage");
                }
            </hgroup>
        </div>
    </div>

    @if (Model.ShowNationalProviders && Model.TotalResults == 0)
    {
        <p>
            Sorry, there are currently no results for the filters you applied'.
        </p>
        <div>
            <p>You can:</p>
            <ul class="list list-bullet">
                <li class="return-search-results">@Html.ActionLink("return to your apprenticeship training search results", "StandardResults", "Provider", new { @apprenticeshipid = @Model.StandardId, @postcode = @Model.PostCode, @keywords = @Model.SearchTerms, isLevyPayingEmployer = Model.IsLevyPayingEmployer }, new { })</li>
                <li class="start-again">@Html.ActionLink("start your job role or keyword search again", "Search", "Apprenticeship")</li>
            </ul>
        </div>

        @Html.Partial("_Help")
    }
    else if (Model.TotalResults == 0)
    {
        <p>
            Sorry, there are currently no training providers for <b>@Model.StandardName, level @Model.StandardLevel</b> for '<b>@Model.PostCode</b>'.
        </p>
        <div>
            <p>You can:</p>
            <ul class="list list-bullet">
                @if (Model.TotalResultsForCountry > 0)
                {
                    <li class="total-providers-country">@Html.ActionLink(string.Format("view all ({0}) training providers", @Model.TotalResultsForCountry), "StandardResults", "Provider", new { @apprenticeshipId = @Model.StandardId, @postcode = Model.PostCode, @showAll = true, isLevyPayingEmployer = Model.IsLevyPayingEmployer }, new { @class = "" }) for <b>@Model.StandardName, level @Model.StandardLevel</b> in England</li>
                }
                <li class="return-search-results">@Html.ActionLink("return to your apprenticeship training search results", "SearchResults", "Apprenticeship", new { @keywords = @Model.SearchTerms }, new { })</li>
                <li class="start-again">@Html.ActionLink("start your job role or keyword search again", "Search", "Apprenticeship")</li>
            </ul>
        </div>

        @Html.Partial("_Help")
    }

    <div class="grid-row">
        <div class="column-third">
            <div class="editSearch">
                @if (Model.Hits.Any() && !Model.HasError)
            {
                    <h2 class="heading-medium">
                        <a href="#EditSearch">Filter results</a>
                    </h2>
                    <div id="EditSearch">
                        @FilterForm("filter-box")
                    </div>
                }
            </div>
        </div>

        <div id="provider-results" class="column-two-thirds">
            <form method="GET" id="search-results-order">
                <input type="hidden" name="page" value="@Model.ActualPage" />
                <input type="hidden" name="PostCode" value="@Model.PostCode.FormatPostcode()" />
                <input type="hidden" name="apprenticeshipid" value="@Model.StandardId" />
                <input type="hidden" name="showAll" value="@Model.ShowAll.ToString()" />
                <input type="hidden" name="isLevyPayingEmployer" value="@Model.IsLevyPayingEmployer.ToString()" />
                <input type="hidden" name="keywords" value="@Model.SearchTerms" />
                <input type="hidden" name="NationalProvidersOnly" value="@Model.ShowNationalProviders" />
                

                @foreach (var item in Model.DeliveryModes)
                {
                    <input type="hidden" name="DeliveryModes" value="@item.Value.ToLower()" />
                }

                <div class="form-block">
                    <label for="select-order" class="form-label-bold">Sort by</label>
                    <select name="order" id="select-order" class="form-control form-control-1-3">
                        <option selected="@(Model.SortOrder == "0")" value="0">Distance (closest first)</option>
                        <option selected="@(Model.SortOrder == "1")" value="1">Training provider (A-Z)</option>
                        <option selected="@(Model.SortOrder == "2")" value="2">Training provider (Z-A)</option>
                    </select>
                    <button type="submit" value="Update" class="button">Update</button>
                </div>
            </form>

            <p class="form-label-bold"> @Model.TotalResults results found</p>
            @{
                Html.RenderPartial("_StandardProviderInformation");
            }
            <div class="page-navigation">
                @GetPaginationBackLink()
                @GetPaginationNextLink()
            </div>
        </div>
    </div>
</main>

@helper GetPaginationBackLink()
{
if (Model.ActualPage > 1)
{
    var previousPage = @Model.ActualPage - 1;
    var url = @Url.Action("StandardResults", "Provider", GetNavigationRouteValues(previousPage, Model.DeliveryModes, Model.SortOrder), null);

        <a href="@url" style="visibility: visible" class="page-navigation__btn prev">
            <i class="arrow-button fa fa-angle-left"></i>
            <span class="description">Previous <span class="hide-mob">page</span></span>
            <span class="counter">@previousPage of @Model.LastPage</span>
        </a>
}
}

@helper GetPaginationNextLink()
{
if (Model.ActualPage < Model.LastPage)
{
    var nextPage = @Model.ActualPage + 1;

    var url = @Url.Action("StandardResults", "Provider", GetNavigationRouteValues(nextPage, Model.DeliveryModes, Model.SortOrder), null);
        <a href="@url" style="visibility: visible" class="page-navigation__btn next">
            <i class="arrow-button fa fa-angle-right"></i>
            <span class="description">Next <span class="hide-mob">page</span></span>
            <span class="counter">@nextPage of @Model.LastPage</span>
        </a>
}
}

@helper FilterForm(string cssClass)
{
if (!Model.DeliveryModes.IsNullOrEmpty())
{
    var hideMenu = Model.DeliveryModes.All(deliveryMode => deliveryMode.Count == 0);

    if (@Model.TotalResults != 0 || !hideMenu)
    {
            <div class="@cssClass">
                <form method="get" autocomplete="off" action="@Model.AbsolutePath">
                    <input type="hidden" name="PostCode" value="@Model.PostCode.FormatPostcode()" />
                    <input type="hidden" name="apprenticeshipid" value="@Model.StandardId" />
                    <input type="hidden" name="showAll" value="@Model.ShowAll.ToString()" />
                    <input type="hidden" name="isLevyPayingEmployer" value="@Model.IsLevyPayingEmployer.ToString()" />
                    <input type="hidden" name="keywords" value="@Model.SearchTerms" />
                    <input type="hidden" name="order" value="@Model.SortOrder" />

                    @{
                        Html.RenderPartial("_FilterProviders", Model.DeliveryModes);
                    }
                    @{
                        Html.RenderPartial("_FilterNationalProviders", Model.NationalProviders);
                    }
                    <input type="submit" value="Update results" class="button margin-top-x2 postcode-search-button" />
                </form>
            </div>
                            }
                        }
}

@functions
{
    RouteValueDictionary GetNavigationRouteValues(int page, IEnumerable<DeliveryModeViewModel> deliveryModes, string order)
    {

        var rv = new RouteValueDictionary { { "apprenticeshipid", Model.StandardId }, { "postcode", Model.PostCode.FormatPostcode() }, { "page", page }, { "showall", Model.ShowAll }, { "isLevyPayingEmployer", Model.IsLevyPayingEmployer } };
        int i = 0;
        foreach (var deliveryMode in deliveryModes.Where(m => m.Checked))
        {
            rv.Add("DeliveryModes[" + i + "]", deliveryMode.Value);
            i++;
        }

        if (Model.ShowNationalProviders)
        {
            rv.Add("NationalProvidersOnly", true);
        }

        rv.Add("order", order);

        return rv;
    }
}