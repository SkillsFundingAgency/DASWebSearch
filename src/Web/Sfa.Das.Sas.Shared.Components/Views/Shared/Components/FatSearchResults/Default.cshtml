@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Sfa.Das.Sas.Shared.Components.ViewModels.Css.Interfaces
@model Sfa.Das.Sas.Shared.Components.ViewComponents.Fat.FatSearchResultsViewModel
@inject ICssViewModel CssViewModel

@if (Model.TotalResults > 0)
{
    @if (Model.IsAllSearch)
    {
        <p>All apprenticeships.</p>
    }
    else
    {
        <p class="das-search-results__summary">There are <span class="das-search-results__summary-count" id="fat-search-result-count">@Model.TotalResults</span> apprenticeships matching your search for <span class="das-search-results__summary-keyword" id="fat-search-result-keyword">@Model.SearchQuery.Keywords</span>.</p>
    }
    <form asp-controller="Basket" asp-action="AddApprenticeshipFromResults" method="post">
        <input type="hidden" asp-for="@Model.SearchQuery.Keywords" />
        <input type="hidden" asp-for="@Model.SearchQuery.Page" />
        <input type="hidden" asp-for="@Model.SearchQuery.SortOrder" />
        <input type="hidden" asp-for="@Model.SearchQuery.ResultsToTake" />
        <ol class="@CssViewModel.SearchList das-search-results">

            @foreach (var result in Model.SearchResults)
            {
                <partial name="Components/FatSearchResults/_searchResultsItem" for="@result" />
            }
        </ol>
    </form>
}
else
{
    <p class="das-search-results__summary">Sorry, there is currently no apprenticeship training for <span class="das-search-results__summary-keyword" id="fat-search-result-keyword">@Model.SearchQuery.Keywords</span>.</p>

    <h3 class="@CssViewModel.HeadingSmall">Try a new search</h3>
    @await Component.InvokeAsync("FatSearch", new { fatSearchRoute = "/employer/find-apprenticeships" })
}

@if (Model.TotalResults > Model.SearchQuery.ResultsToTake)
{

    <ul class="das-pagination das-pagination--employer">

        <li class="das-pagination__list-item">
            @if (Model.SearchQuery.Page > 1)
            {
                <a class="das-pagination__link das-pagination__link--previous" id="link-pagination-previous" href="@await GetPaginationBackLinkHref(Model.SearchQuery.Page, Model.SearchQuery.Keywords)">Previous page <span class="das-pagination__caption">@(Model.SearchQuery.Page - 1) of @Model.LastPage</span></a>
            }
        </li>


        @if (Model.SearchQuery.Page < Model.LastPage)
        {
            <li class="das-pagination__list-item">
                <a class="das-pagination__link das-pagination__link--next" id="link-pagination-apprentice-next" href="@await GetPaginationNextLinkHref(Model.SearchQuery.Page,Model.SearchQuery.Keywords)">Next page <span class="das-pagination__caption">@(Model.SearchQuery.Page + 1) of @Model.LastPage</span></a>
            </li>
        }

    </ul>
}


@functions
{

Task<string> GetPaginationBackLinkHref(int currentPage, string keywords)
{
    var path = this.ViewContext.HttpContext.Request.Path;

    var href = $"{path}?keywords={keywords}&page={currentPage - 1}";
    return Task.FromResult(href);
}

Task<string> GetPaginationNextLinkHref(int currentPage, string keywords)
{
    var path = this.ViewContext.HttpContext.Request.Path;

    var href = $"{path}?keywords={keywords}&page={currentPage + 1}";
    return Task.FromResult(href);
}

}