@using Sfa.Das.Sas.Shared.Components.ViewComponents.TrainingProvider
@using Sfa.Das.Sas.Shared.Components.ViewModels.Css.Interfaces
@model IList<Sfa.Das.Sas.Shared.Components.ViewComponents.TrainingProvider.FilterViewModel>
@inject ICssViewModel CssViewModel

<div class="@(CssViewModel.FormCss.FormGroup)">
    <p class="@(CssViewModel.UtilitiesCss.FontWeightBold)">Training options:</p>
    <div class="@CssViewModel.FormCss.Radio">

        @foreach (var item in Model)
        {
            <div class="@CssViewModel.FormCss.RadioItem">
                <input class="@CssViewModel.FormCss.RadioInput" value="@item.Value.ToLower()" name="DeliveryModes" id="DeliveryModes_@item.Value" type="checkbox" @Html.Raw(item.Checked ? "checked" : "") @Html.Raw(item.Count == 0 ? "disabled" : "") />
                <label class="@Html.Raw(item.Count == 0 ? "disabled" : "") @(CssViewModel.FormCss.RadioLabel)" for="DeliveryModes_@item.Value">@await GetLabelText(item)</label>
            </div>
        }

        <details class="@CssViewModel.Details">
            <summary class="@CssViewModel.DetailsSummary">
                <span class="@CssViewModel.DetailsSummaryText">Explain training options</span>
            </summary>
            <div class="@CssViewModel.DetailsText">
                <p>
                    <span class="bold-small">Day release:</span> for example one day a week at the training provider's location.
                </p>
                <p>
                    <span class="bold-small">Block release:</span> for example 3-4 weeks at the training provider's location.
                </p>
                <p>
                    <span class="bold-small">At your location:</span> the training provider comes to your workplace.
                </p>
            </div>
        </details>
    </div>
</div>

@functions
{

    Task<string> GetLabelText(FilterViewModel item)
    {
        var labelText = "";

        switch (item.Value)
        {
            case "blockrelease":
                labelText = "Block release";

                break;
            case "dayrelease":
                labelText = "Day release";
                break;
            case "100percentemployer":
                labelText = "At your location";
                break;
        }

        labelText = $"{labelText} ({item.Count})";

        return Task.FromResult(labelText);
    }

}